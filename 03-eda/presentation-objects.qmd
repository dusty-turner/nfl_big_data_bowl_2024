---
title: "Neural-net"
author: "Dusty Turner"
format: html
engines:
  R: true
  python: true
cache: true
warning: false
message: false
---

## Testing

```{r}
library(tidyverse)
library(gganimate)
library(arrow)
source(here::here("03-eda","ggtheme_field.R"))

test_joined_with_preds <- read_rds(here::here("04-models", "test_joined_with_preds.rds"))
week_1 <- read_parquet(here::here("02-clean-data", "week_1.parquet"))
defensive_model_building_data <- read_parquet(here::here("02-clean-data", "defensive_model_building_data.parquet"))

```



## Images to Include

```{r}
library(gganimate)

test_joined_with_preds <-
week_1 |> left_join(
test_joined_with_preds |> 
  mutate(game_idplay_id = str_c(game_id, play_id)) |> 
  select(game_idplay_id, display_name, frame_id, final_predictions, binary_predictions)
) 

test_joined_with_preds |> distinct(game_idplay_id, display_name, tackle, position)  |> 
  count(position, tackle) |> 
  filter(tackle == 1) |> 
  mutate(perc_tackle = n / sum(n)) |> select(-tackle, -n) |> 
  left_join(

test_joined_with_preds |> distinct(game_idplay_id, display_name, binary_predictions, position)  |> 
  count(position, binary_predictions) |> 
  filter(binary_predictions == 1) |> 
  mutate(perc_predicted = n / sum(n)) |> select(-binary_predictions, -n))




# stub <- "20220908002072" ## seems too perfect
# stub <- "20220908002163" ## good example of a player over performing
# stub <- "2022091105889" ## ## good one of a dlineman making a tackle
# stub <- "2022091113756" ## ## parsons down field tackle
stub <- "20220911133173" ## donavon wilson

week_1 %>% filter(game_idplay_id == stub) |> filter(tackle == 1) |> select(display_name, jersey_number)
```

## Prediction over Time

```{r}
# Assuming week_1 is your data frame
animated_plot <-
  test_joined_with_preds %>% filter(game_idplay_id == stub) |> 
  # left_join(test_joined_with_preds %>% select(game_id, play_id, display_name, frame_id, final_predictions), by = c("game_id", "play_id", "display_name", "frame_id")) %>% 
  filter(!is.na(final_predictions)) %>% 
  group_by(game_id, play_id) %>% 
  # filter(cur_group_id() == 4) |> 
  ungroup()  |> 
  select(frame_id, final_predictions, jersey_number) |> 
  ggplot(aes(x = frame_id, y = final_predictions)) + 
  geom_line() +
  geom_point(show.legend = FALSE, size = 3) + 
  facet_wrap(~jersey_number) +
  transition_reveal(frame_id)

anm1 <- animate(animated_plot, width = 800, height = 600, nframes = 100)

animated_plot2 <-
test_joined_with_preds |> filter(game_idplay_id == stub) |> 
  relocate(final_predictions) |> 
  filter(frame_id <= max(frame_id)-4) |> 
  mutate(final_predictions = ifelse(club == defensive_team & is.na(final_predictions), 0, final_predictions)) |> 
  mutate(color = final_predictions) |> 
  mutate(jersey_number = ifelse(defensive_team == club, jersey_number, "")) |> 
  select(display_name, distance_to_ball, x, y, color, absolute_yardline_number, ball_carrier, play_id, time, play_description, is_football, club, jersey_number, final_predictions, defensive_team, frame_id) %>%
  # select(frame_id, display_name, final_predictions) |> print(n = Inf)
{
  ggplot(data = ., aes(x = x, y = y, color = color)) +
      # ggplot(aes(x = x, y = y, color = color)) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "blue") +
  geom_point(aes(shape = is_football), size = 3, show.legend = FALSE) +
  geom_text(aes(label = jersey_number), color = "black", nudge_y = -1) +
  scale_color_gradient(low = "grey", high = "black", na.value = "dodgerblue") +
  transition_time(time) + ease_aes("linear") +
  labs(y = "", x = "Yards To Endzone", title = str_wrap(.$play_description[1], width = 80)) +
  theme_field
}
```

## Follows Players Around Field

```{r}
animated_plot2 <-
test_joined_with_preds |> filter(game_idplay_id == stub) |> 
  relocate(final_predictions) |> 
  filter(frame_id <= max(frame_id)-4) |> 
  mutate(final_predictions = ifelse(club == defensive_team & is.na(final_predictions), 0, final_predictions)) |> 
  mutate(color = final_predictions) |> 
  mutate(jersey_number = ifelse(defensive_team == club, jersey_number, "")) |> 
  select(display_name, distance_to_ball, x, y, color, absolute_yardline_number, ball_carrier, play_id, time, play_description, is_football, club, jersey_number, final_predictions, defensive_team, frame_id) %>%
  # select(frame_id, display_name, final_predictions) |> print(n = Inf)
{
  ggplot(data = ., aes(x = x, y = y, color = color)) +
      # ggplot(aes(x = x, y = y, color = color)) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "blue") +
  geom_point(aes(shape = is_football), size = 3, show.legend = FALSE) +
  geom_text(aes(label = jersey_number), color = "black", nudge_y = -1) +
  scale_color_gradient(low = "grey", high = "black", na.value = "dodgerblue") +
  transition_time(time) + ease_aes("linear") +
  labs(y = "", x = "Yards To Endzone", title = str_wrap(.$play_description[1], width = 80)) +
  theme_field
}

anm2 <- animate(animated_plot2, width = 800, height = 600, nframes = 100)
```

## Follows Most likely tackle

```{r}
animated_plot3 <-
test_joined_with_preds |> filter(game_idplay_id == stub) |>   relocate(final_predictions) |> 
  filter(frame_id <= max(frame_id)-4) |> 
  mutate(final_predictions = ifelse(club == defensive_team & is.na(final_predictions), 0, final_predictions)) |> 
  group_by(frame_id) |> 
  mutate(max_predict = final_predictions == max(final_predictions, na.rm = TRUE)) |> 
  ungroup() |> 
  mutate(color = max_predict) |> 
  mutate(jersey_number = ifelse(defensive_team == club, jersey_number, "")) |> 
  select(max_predict, display_name, distance_to_ball, x, y, color, absolute_yardline_number, ball_carrier, play_id, time, play_description, is_football, club, jersey_number, final_predictions, defensive_team, frame_id) %>% 
{
  ggplot(data = ., aes(x = x, y = y, color = color)) +
      # ggplot(aes(x = x, y = y, color = color)) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "blue") +
  geom_point(aes(shape = is_football), size = 3, show.legend = FALSE) +
  geom_text(aes(label = jersey_number), color = "black", nudge_y = -1) +
  # scale_color_gradient(low = "grey", high = "black", na.value = "dodgerblue") +
  transition_time(time) + ease_aes("linear") +
  labs(y = "", x = "Yards To Endzone", title = str_wrap(.$play_description[1], width = 80)) +
  theme_field
}

anm3 <- animate(animated_plot3, width = 800, height = 600, nframes = 100)

# nn_briar <- 
test_joined_with_preds |> 
  select(game_id, play_id, display_name, frame_id, position) |> 
  left_join(test_joined_with_preds) |> 
  select(game_id, play_id, display_name,tackle, position, final_predictions) |> 
  filter(!is.na(final_predictions)) |> 
  mutate(tackle  = as.integer(as.character(tackle))) |> 
  group_by(game_id, play_id, display_name) |> 
  reframe(expected_prob_of_tackle = mean(final_predictions), tackle = mean(tackle), position = position[1]) |> 
  mutate(tackles_over_expected_play = ifelse(tackle == 1, 1-expected_prob_of_tackle, -expected_prob_of_tackle)) |> 
  group_by(display_name, position) |> 
  reframe(tackles_over_expected = sum(tackles_over_expected_play)) |> 
  arrange(tackles_over_expected) 



```

##

```{r}

players <-
test_joined_with_preds |> filter(game_idplay_id == stub) |> 
  relocate(final_predictions) |> 
  filter(frame_id <= max(frame_id)-4) |> 
  mutate(final_predictions = ifelse(club == defensive_team & is.na(final_predictions), 0, final_predictions)) |> 
  mutate(color = final_predictions) |> 
  mutate(jersey_number = ifelse(defensive_team == club, jersey_number, "")) 

los_values <- players$x |> range()

players_football <-
  players |> 
    filter(is_football == "football") 

my_custom_blue <- rgb(86, 158, 242, maxColorValue = 255)  

field_anim <-
players |>
  filter(is_football == "not_football") %>%
  mutate(tackle = ifelse(is.na(final_predictions), NA, tackle )) %>%
    select(display_name, distance_to_ball, x, y, color, absolute_yardline_number, ball_carrier, play_id, time, play_description, is_football, club, jersey_number, final_predictions, defensive_team, frame_id, tackle) %>%

{
  ggplot(data = ., aes(x = x, y = y, fill = color)) +
  gg_field(yardmin = los_values[1]-3, yardmax = los_values[2]+3, buffer = 0) +
  geom_point(shape = 21, size = 5, show.legend = FALSE, aes(color = tackle)) +
  geom_text(aes(label = jersey_number), color = "black", nudge_y = -1) +
  # scale_color_gradient(low = "yellow", high = "red", na.value = "dodgerblue") +
  scale_fill_gradient(low = "orange", high = "red", na.value = my_custom_blue) +
  scale_color_manual(values = c("0" = "black", "1" = "white"), na.value = "black") +
  labs(title = str_wrap(.$play_description[1], width = 80)) +
  geom_point(data = players_football, size = 5, show.legend = FALSE, color = "brown", fill = "brown", shape = 17) +
  transition_time(time) + ease_aes("linear")
}

anm4 <- animate(field_anim, width = 800, height = 600, nframes = 100)

anim_save("05-presentation-files/run-play-with-probs.gif", animation = anm4)

```




## Distance to the ball

```{r}

distance <-
players |> 
  filter(defensive_team == club) |> 
  select(distance_to_ball, display_name, x, y, x_ball, y_ball, color, absolute_yardline_number, ball_carrier, play_id, time, play_description, is_football, club, distance_to_ball) %>% 
  filter(is_football == "not_football") %>%
{
  ggplot(data = ., aes(x = x, y = y, color == "black")) +
  gg_field(yardmin = los_values[1]-1, yardmax = los_values[2]-2, buffer = 0) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "yellow", linewidth = 2, alpha = .75) +
  geom_segment(aes(xend = x_ball, yend = y_ball), color = "black") +
  geom_point(size = 5) +
  geom_point(data = players_football, size = 5, show.legend = FALSE, color = "brown", fill = "brown", shape = 17) +
  transition_time(time) + ease_aes("linear") +
  labs(y = "", x = "", title = str_wrap(.$play_description[1], width = 80))
}

distance_anim <- animate(distance, width = 800, height = 600, nframes = 100)

anim_save("05-presentation-files/distance.gif", animation = distance_anim)

```

## Speed Vector Similarity

```{r}

v_approach <-
players |> 
  filter(defensive_team == club) |> 
  select(distance_to_ball, display_name, x, y, x_ball, y_ball, color, absolute_yardline_number, ball_carrier, play_id, time, play_description, is_football, club, distance_to_ball, v_approach) %>% 
  filter(is_football == "not_football") %>%
{
  ggplot(data = ., aes(x = x, y = y, color = v_approach)) +
  gg_field(yardmin = los_values[1]-1, yardmax = los_values[2]-2, buffer = 0) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "yellow", linewidth = 2, alpha = .75) +
  geom_point(size = 5) +
  geom_point(data = players_football, size = 5, show.legend = FALSE, color = "brown", fill = "brown", shape = 17) +
  scale_color_gradient2(na.value = "dodgerblue", low = "green", high = "green", mid = "red", midpoint = 0, guide = "none") +
  transition_time(time) + ease_aes("linear") +
  labs(y = "", x = "", title = str_wrap(.$play_description[1], width = 80)) 
}

v_approach_anim <- animate(v_approach, width = 800, height = 600, nframes = 100)

anim_save("05-presentation-files/v_approach_anim.gif", animation = v_approach_anim)


```

## Projected Movement

```{r}
projected_movement <-
players |> 
  filter(defensive_team == club) |> 
  select(distance_to_ball, display_name, x, y, x_going, y_going, x_ball, y_ball, color, absolute_yardline_number, ball_carrier, play_id, time, play_description, is_football, club, distance_to_ball, v_approach) %>% 
  filter(is_football == "not_football") %>%
{
  ggplot(data = ., aes(x = x, y = y)) +
  gg_field(yardmin = los_values[1]-1, yardmax = los_values[2]-2, buffer = 0) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "yellow", linewidth = 2, alpha = .75) +
  geom_point(size = 5) +
  geom_point(data = players_football, size = 5, show.legend = FALSE, color = "brown", fill = "brown", shape = 17) +
  geom_segment(aes(xend = x_going, yend = y_going), arrow = arrow(length = unit(0.03, "npc")), color = "black") +
  geom_segment(data = players_football, aes(xend = x_going, yend = y_going), arrow = arrow(length = unit(0.03, "npc")), color = "black") +
  transition_time(time) + ease_aes("linear") +
  labs(y = "", x = "", title = str_wrap(.$play_description[1], width = 80)) 
}

projected_movement_anim <- animate(projected_movement, width = 800, height = 600, nframes = 100)

anim_save("05-presentation-files/projected_movement_anim.gif", animation = projected_movement_anim)

```

## Orientation Fan

```{r}
orientation_fan_1 <-
players |> 
  filter(defensive_team == club) |> 
    mutate(color = ifelse(ball_in_fan3 == "yes", "No", "Yes")) |> 
  select(distance_to_ball, display_name, x, y, x_going, y_going, x_ball, y_ball,x_left, x_right, y_left, y_right, color,  absolute_yardline_number, ball_carrier, play_id, time, play_description, is_football, club, distance_to_ball, v_approach) %>% 
  filter(is_football == "not_football") %>% 
{
  ggplot(data = ., aes(x = x, y = y, group = display_name, color = color)) +
  gg_field(yardmin = los_values[1]-1, yardmax = los_values[2]-2, buffer = 0) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "yellow", linewidth = 2, alpha = .75) +
  geom_point(size = 5, show.legend = FALSE) +
  scale_color_manual(values = c("No" = "pink", "Yes" = my_custom_blue), na.value = "black") +
  geom_point(data = players_football, size = 5, show.legend = FALSE, color = "brown", fill = "brown", shape = 17) +
  geom_segment(aes(xend = x_left, yend = y_left), arrow = arrow(length = unit(0.02, "npc")), color = "purple", show.legend = FALSE) +
  geom_segment(aes(xend = x_right, yend = y_right), arrow = arrow(length = unit(0.02, "npc")), color = "purple", show.legend = FALSE) +
  transition_time(time) + ease_aes("linear") +
  labs(y = "", x = "", title = str_wrap(.$play_description[1], width = 80)) 
}

orientation_fan_1_anim <- animate(orientation_fan_1, width = 800, height = 600, nframes = 100)

anim_save("05-presentation-files/orientation_fan_1.gif", animation = orientation_fan_1_anim)

orientation_fan_2 <-
players |> 
  filter(defensive_team == club) |> 
    mutate(color = ifelse(ball_in_fan3 == "yes", "No", "Yes")) |> 
  select(distance_to_ball, display_name, x, y, x_going, y_going, x_ball, y_ball,x_left, x_right, y_left, y_right, color,  absolute_yardline_number, ball_carrier, play_id, time, play_description, is_football, club, distance_to_ball, v_approach) %>% 
  filter(is_football == "not_football") %>% 
{
  ggplot(data = ., aes(x = x, y = y, group = display_name, color = color)) +
  gg_field(yardmin = los_values[1]-1, yardmax = los_values[2]-2, buffer = 0) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "yellow", linewidth = 2, alpha = .75) +
  geom_point(size = 5, show.legend = FALSE) +
  scale_color_manual(values = c("No" = "pink", "Yes" = my_custom_blue), na.value = "black") +
  geom_point(data = players_football, size = 5, show.legend = FALSE, color = "brown", fill = "brown", shape = 17) +
  geom_segment(aes(xend = x_left, yend = y_left), arrow = arrow(length = unit(0.02, "npc")), color = "purple", show.legend = FALSE) +
  geom_segment(aes(xend = x_right, yend = y_right), arrow = arrow(length = unit(0.02, "npc")), color = "purple", show.legend = FALSE) +
  transition_time(time) + ease_aes("linear") +
  labs(y = "", x = "", title = str_wrap(.$play_description[1], width = 80)) 
}

orientation_fan_2_anim <- animate(orientation_fan_2, width = 800, height = 600, nframes = 100)

anim_save("05-presentation-files/orientation_fan_2.gif", animation = orientation_fan_2_anim)

orientation_fan_3 <-
players |> 
  filter(defensive_team == club) |> 
    mutate(color = ifelse(ball_in_fan3 == "yes", "No", "Yes")) |> 
  select(distance_to_ball, display_name, x, y, x_going, y_going, x_ball, y_ball,x_left, x_right, y_left, y_right, color,  absolute_yardline_number, ball_carrier, play_id, time, play_description, is_football, club, distance_to_ball, v_approach) %>% 
  filter(is_football == "not_football") %>% 
{
  ggplot(data = ., aes(x = x, y = y, group = display_name, color = color)) +
  gg_field(yardmin = los_values[1]-1, yardmax = los_values[2]-2, buffer = 0) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "yellow", linewidth = 2, alpha = .75) +
  geom_point(size = 5, show.legend = FALSE) +
  scale_color_manual(values = c("No" = "pink", "Yes" = my_custom_blue), na.value = "black") +
  geom_point(data = players_football, size = 5, show.legend = FALSE, color = "brown", fill = "brown", shape = 17) +
  geom_segment(aes(xend = x_left, yend = y_left), arrow = arrow(length = unit(0.02, "npc")), color = "purple", show.legend = FALSE) +
  geom_segment(aes(xend = x_right, yend = y_right), arrow = arrow(length = unit(0.02, "npc")), color = "purple", show.legend = FALSE) +
  transition_time(time) + ease_aes("linear") +
  labs(y = "", x = "", title = str_wrap(.$play_description[1], width = 80)) 
}

orientation_fan_3_anim <- animate(orientation_fan_3, width = 800, height = 600, nframes = 100)

anim_save("05-presentation-files/orientation_fan_3.gif", animation = orientation_fan_3_anim)
```


## Projected Movement with Orientation Fan

```{r}
projected_movement_with_fan <-
players |> 
  filter(defensive_team == club) |> 
    mutate(color = ifelse(ball_in_fan3 == "yes", "No", "Yes")) |> 
  select(distance_to_ball, display_name, x, y, x_going, y_going, x_ball, y_ball,x_left, x_right, y_left, y_right, color,  absolute_yardline_number, ball_carrier, play_id, time, play_description, is_football, club, distance_to_ball, v_approach) %>% 
  filter(is_football == "not_football") %>% 
{
  ggplot(data = ., aes(x = x, y = y, group = display_name, color = color)) +
  gg_field(yardmin = los_values[1]-1, yardmax = los_values[2]-2, buffer = 0) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "yellow", linewidth = 2, alpha = .75) +
  geom_point(size = 5, show.legend = FALSE) +
  scale_color_manual(values = c("No" = "pink", "Yes" = my_custom_blue), na.value = "black") +
  geom_point(data = players_football, size = 5, show.legend = FALSE, color = "brown", fill = "brown", shape = 17) +
  geom_segment(aes(xend = x_going, yend = y_going), arrow = arrow(length = unit(0.03, "npc")), color = "black") +
  geom_segment(aes(xend = x_left, yend = y_left), arrow = arrow(length = unit(0.02, "npc")), color = "purple") +
  geom_segment(aes(xend = x_right, yend = y_right), arrow = arrow(length = unit(0.02, "npc")), color = "purple") +
  transition_time(time) + ease_aes("linear") +
  labs(y = "", x = "", title = str_wrap(.$play_description[1], width = 80)) 
}

projected_movement_with_fan_anim <- animate(projected_movement_with_fan, width = 800, height = 600, nframes = 100)

anim_save("05-presentation-files/projected_movement_with_fan_anim.gif", animation = projected_movement_with_fan_anim)


```

<!-- ## -->

<!-- <iframe width="560" height="315" src="https://www.youtube.com/embed/X3N2tcxgUAM?si=2qHa5V12JeAeXSu_&amp;start=12" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe> -->

## Projected Movement to The Ball

```{r}
projected_movement_to_ball <-
players |> 
  filter(defensive_team == club) |> 
  mutate(color = ifelse(is_football != "football", distance_to_ball, NA)) |> 
  select(distance_to_ball, display_name, x, y, x_going, y_going, x_ball, y_ball,x_ball_next, y_ball_next, color,  absolute_yardline_number, ball_carrier, play_id, time, play_description, is_football, club, distance_to_ball, v_approach) %>% 
  filter(is_football == "not_football") %>% 
{
  ggplot(data = ., aes(x = x, y = y, color = is_football)) +
  gg_field(yardmin = los_values[1]-1, yardmax = los_values[2]-2, buffer = 0) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "yellow", linewidth = 2, alpha = .75) +
  geom_segment(aes(xend = x_ball_next, yend = y_ball_next), color = "black") +
  geom_point(size = 5, show.legend = FALSE, color = "dodgerblue") +
  geom_point(data = players_football, size = 5, show.legend = FALSE, color = "brown", fill = "brown", shape = 17) +
  transition_time(time) + ease_aes("linear") +
  labs(y = "", x = "Yards To Endzone", title = str_wrap(.$play_description[1], width = 80)) +
  theme_field
}

projected_movement_to_ball_anim <- animate(projected_movement_to_ball, width = 800, height = 600, nframes = 100)

anim_save("05-presentation-files/projected_movement_to_ball.gif", animation = projected_movement_to_ball_anim)

```


## Positions

```{r}
positions_static <-
week_1 |> 
  filter(game_idplay_id == stub) |> 
  filter(frame_id == 1) |>
  filter(defensive_team == club | is_football == "football") |>
  mutate(position = ifelse(is.na(position), "Football", as.character(position))) |> 
  mutate(color = ifelse(is_football != "football", distance_to_ball, NA)) |>
  select(game_id, display_name, x, y, v_approach, color, absolute_yardline_number, ball_carrier, play_id, time, is_football, club, distance_to_ball, play_description, x_going, y_going, position) %>%
  {
  ggplot(data = ., aes(x = x, y = y, color = fct_relevel(position, "Football"))) +
  gg_field(yardmin = los_values[1]-1, yardmax = los_values[2]-2, buffer = 0) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "yellow", linewidth = 2, alpha = .75) +
  geom_point(size = 5, show.legend = TRUE) +
  labs(y = "", x = "", title = "", color = "Position") 
  }

ggsave(filename = "05-presentation-files/positions_static.png", plot = positions_static, width = 10, height = 8, dpi = 300)
```

## Start Points

```{r}
hdr_start_points <-
week_1 |> 
  filter(str_detect(event, "snap")) |> 
  filter(club != possession_team) |> 
  select(position, x, y, yardline_number, absolute_yardline_number, event) |> 
  mutate(x_from_los = abs(absolute_yardline_number - x)) |> 
  ggplot(aes(x = x_from_los + 65, y = y)) +
  gg_field(yardmin = 60, yardmax = 85,buffer = 0) +
  ggdensity::geom_hdr() +
  theme(legend.position = "none") +
  labs(x = "Distance from Line of Scrimage", y = "")

ggsave(filename = "05-presentation-files/hdr_start_points.png", plot = hdr_start_points, width = 10, height = 8, dpi = 300)
```

## Alignment Clusters

```{r}
assignment_clusters <-
defensive_model_building_data |> 
  filter(str_detect(event, "snap")) |> 
  filter(club != possession_team) |> 
  select(position, x, y, yardline_number, absolute_yardline_number, event, frame_id, alignment_cluster) |> 
  mutate(x_from_los = abs(absolute_yardline_number - x)) |> 
  filter(frame_id == 6) %>% 
{
  ggplot(data = ., aes(x = x_from_los + 65, y = y, color = alignment_cluster)) +
  gg_field(yardmin = 63, yardmax = 90,buffer = 0) +
  geom_point(show.legend = FALSE, size = 1)
  # labs(color = "Cluster")
}

ggsave(filename = "05-presentation-files/assignment_clusters.png", plot = assignment_clusters, width = 10, height = 8, dpi = 300)

```



