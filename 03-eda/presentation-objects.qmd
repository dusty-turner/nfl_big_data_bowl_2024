---
title: "Neural-net"
author: "Dusty Turner"
format: html
engines:
  R: true
  python: true
cache: true
warning: false
message: false
---

## Testing

```{r}
library(tidyverse)
library(gganimate)
library(arrow)
source(here::here("03-eda","ggtheme_field.R"))

# test_joined_with_preds <- read_rds(here::here("04-models", "test_joined_with_preds_2024-01-06_18-30-20.rds"))
week_1 <- read_parquet(here::here("02-clean-data", "week_1.parquet"))
defensive_model_building_data <- read_parquet(here::here("02-clean-data", "defensive_model_building_data.parquet"))

test_joined_with_preds <- read_rds("04-models/test_joined_with_preds_2024-01-07_16-03-36.rds")

# stub <- "20220908002072" ## seems too perfect
# stub <- "20220908002163" ## good example of a player over performing
# stub <- "2022091105889" ## ## good one of a dlineman making a tackle -- jerks too much at end
# stub <- "2022091113756" ## ## parsons down field tackle -- doesn't pick it up
# stub <- "20220911133173" ## donavon wilson -- doesn't pick it up

test_joined_with_preds |> 
  select(game_idplay_id, display_name, final_predictions, binary_predictions, tackle, play_type, club, position, frame_id, jersey_number) |> 
  filter(club == "DAL") |> 
  filter(play_type == "run") |> 
  filter(tackle == 1) |> 
  filter(display_name == "Malik Hooker") |>  print(n = Inf)
  # count(display_name, sort = T)
  # filter(position == "MLB") |> 
  # count(display_name, sort = T)

test_joined_with_preds %>% filter(game_idplay_id == stub) |> filter(tackle == 1) |> select(display_name, jersey_number)

stub <- "2022101611915" ## this is the running play i want to use with Malik Hooker

players_football <-
week_1 |> 
  filter(game_idplay_id == stub) |> 
  filter(is_football == "football") |> 
  filter(frame_id <= max(frame_id)-4)  
  # filter(game_idplay_id %in% unique(test_joined_with_preds$game_idplay_id))


players <-
week_1 |> 
  filter(game_idplay_id == stub) |> 
  mutate(tackle = as.factor(ifelse(str_detect(display_name, "Kearse"), 1, tackle))) |> 
  left_join(

test_joined_with_preds |> 
  filter(game_idplay_id == stub) |> 
  select(game_idplay_id, frame_id, display_name, final_predictions, binary_predictions) 
) |> 
    filter(frame_id <= max(frame_id)-4) |> 
  mutate(color = final_predictions) |> 
  mutate(tackle = as.factor(ifelse(is.na(final_predictions), NA, as.character(tackle))))
  


# players <-
# test_joined_with_preds |> filter(game_idplay_id == stub) |> 
#   relocate(game_idplay_id,final_predictions) |> 
#   # filter(frame_id <= max(frame_id)-4) |> 
#   mutate(final_predictions = ifelse(club == defensive_team & is.na(final_predictions), 0, final_predictions)) |> 
#   mutate(color = final_predictions) |> 
#   mutate(jersey_number = ifelse(defensive_team == club, jersey_number, "")) 

los_values <- players$x |> range()

my_custom_blue <- rgb(86, 158, 242, maxColorValue = 255)  



players |> 
  filter(game_idplay_id == stub)  |> 
  count(frame_id, time)

players_football |> 
  filter(game_idplay_id == stub) |> 
  filter(is_football == "football") 


```



## Images to Include

```{r}
library(gganimate)


test_joined_with_preds |> distinct(game_idplay_id, display_name, tackle, position)  |> 
  count(position, tackle) |> 
  filter(tackle == 1) |> 
  mutate(perc_tackle = n / sum(n)) |> select(-tackle, -n) |> 
  left_join(

test_joined_with_preds |> distinct(game_idplay_id, display_name, binary_predictions, position)  |> 
  count(position, binary_predictions) |> 
  filter(binary_predictions == 1) |> 
  mutate(perc_predicted = n / sum(n)) |> select(-binary_predictions, -n))


percofpredictionsplot <-
test_joined_with_preds |> distinct(game_idplay_id, display_name, tackle, position, play_type)  |> 
  count(position, tackle, position, play_type) |> 
  filter(tackle == 1) |>
  group_by(play_type) |> 
  mutate(perc_tackle = n / sum(n)) |> select(-tackle, -n) |> ungroup() |>  
  left_join(

test_joined_with_preds |> distinct(game_idplay_id, display_name, binary_predictions, position, play_type)  |> 
  count(position, binary_predictions, play_type) |> 
  filter(binary_predictions == 1) |> 
  group_by(play_type) |> 
  mutate(perc_predicted = n / sum(n)) |> select(-binary_predictions, -n) |> ungroup()
) |> 
  filter(!is.na(position)) |> rename(Tackle = perc_tackle, Modeled = perc_predicted) |> 
  mutate(play_type = str_to_title(play_type)) |> 
  pivot_longer(cols = c("Tackle", "Modeled")) |> 
  ggplot(aes(x = name, y = value, fill = name)) +
  geom_col() +
  scale_fill_manual(values = c("Tackle" = "#1f77b4", "Modeled" = "#ff7f0e")) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1, scale = 100)) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "none" # This will remove the legend for the fill aesthetic
  ) +
  facet_grid(play_type~position) +
  labs(x = "", y = "")


ggsave("05-presentation-files/perc-of-predictions-plot-1000-400.png", plot = percofpredictionsplot, width = 10, height = 4)

```

## Prediction over Time

```{r}

animated_plot <-
  players |> 
  filter(!is.na(final_predictions)) |> 
  select(frame_id, final_predictions, display_name, jersey_number, tackle) |>
  mutate(id = str_c(display_name, ": ", jersey_number)) |> 
  ggplot(aes(x = frame_id, y = final_predictions)) + 
  geom_line() +
  geom_point(show.legend = FALSE, size = 3, aes(color = tackle), shape = 21, fill = "black") + 
  scale_y_continuous(labels = scales::percent) +
  scale_color_manual(values = c("1" = "white", "0" = "black"), na.value = "black") +
  labs(x = "Frame of Play", y = "Probability of Tackle") +
  facet_wrap(~id) +
  transition_reveal(frame_id)
  
anm1 <- animate(animated_plot, width = 466, height = 350, nframes = 100)


anim_save("05-presentation-files/prob-tracker.gif", animation = anm1, dpi = 1000)
```

## This is the main probability changer as play changes vis

```{r}


field_anim <-
players |> 
  filter(is_football == "not_football") %>%
    select(display_name, distance_to_ball, x, y, color, absolute_yardline_number, time, play_description, is_football, club, jersey_number, final_predictions, defensive_team, frame_id, tackle) %>% 

# {
  ggplot(aes(x = x, y = y, fill = color)) +
  gg_field(yardmin = los_values[1]-3, yardmax = los_values[2]+3, buffer = 0) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "yellow", linewidth = 1, alpha = .75) +
  geom_point(shape = 21, size = 3, show.legend = FALSE, aes(color = tackle)) +
  geom_text(aes(label = jersey_number), color = "black", nudge_y = -1, size = 3) +
  # scale_color_gradient(low = "yellow", high = "red", na.value = "dodgerblue") +
  scale_fill_gradient(low = "orange", high = "red", na.value = my_custom_blue) +
  scale_color_manual(values = c("1" = "white", "0" = "black"), na.value = "black") +
  geom_point(data = players_football, size = 3, show.legend = FALSE, color = "brown", fill = "brown", shape = 17) +
  transition_time(time) + ease_aes("linear")
# }

anm4 <- animate(field_anim, width = 466, height = 350, nframes = 100)

anim_save("05-presentation-files/run-play-with-probs.gif", animation = anm4)

```




## Distance to the ball

```{r}

distance <-
players |> 
  filter(defensive_team == club) |> 
  select(distance_to_ball, display_name, x, y, x_ball, y_ball, color, absolute_yardline_number, ball_carrier, play_id, time, play_description, is_football, club, distance_to_ball) %>% 
  filter(is_football == "not_football") %>%
# {
  ggplot(aes(x = x, y = y, color = "black")) +
  gg_field(yardmin = los_values[1]-3, yardmax = los_values[2]+3, buffer = 0) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "yellow", linewidth = 2, alpha = .75) +
  geom_segment(aes(xend = x_ball, yend = y_ball), color = "black") +
  geom_point(size = 3, show.legend = FALSE, fill = "dodgerblue", shape = 21, color = "black") +
  geom_point(data = players_football, size = 3, show.legend = FALSE, color = "brown", fill = "brown", shape = 17) +
  transition_time(time) + ease_aes("linear") +
  labs(y = "", x = "")
# }

distance_anim <- animate(distance, width = 466, height = 350, nframes = 100)

anim_save("05-presentation-files/distance.gif", animation = distance_anim)

```

## Projected Movement

```{r}
projected_movement <-
players |> 
  filter(defensive_team == club) |> 
  select(distance_to_ball, display_name, x, y, x_going, y_going, x_ball, y_ball, color, absolute_yardline_number, ball_carrier, play_id, time, play_description, is_football, club, distance_to_ball, v_approach) %>% 
  filter(is_football == "not_football") %>%
  
  ggplot(aes(x = x, y = y)) +
  gg_field(yardmin = los_values[1]-3, yardmax = los_values[2]+3, buffer = 0) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "yellow", linewidth = 2, alpha = .75) +
  geom_point(size = 3, show.legend = FALSE, fill = "dodgerblue", shape = 21, color = "black") +
  geom_point(data = players_football, size = 3, show.legend = FALSE, color = "brown", fill = "brown", shape = 17) +
  geom_segment(aes(xend = x_going, yend = y_going), arrow = arrow(length = unit(0.03, "npc")), color = "black") +
  geom_segment(data = players_football, aes(xend = x_going, yend = y_going), arrow = arrow(length = unit(0.03, "npc")), color = "black") +
  transition_time(time) + ease_aes("linear") +
  labs(y = "", x = "") 


projected_movement_anim <- animate(projected_movement, width = 466, height = 350, nframes = 100)

anim_save("05-presentation-files/projected_movement_anim.gif", animation = projected_movement_anim)

```

## Projected Movement to The Ball

```{r}
projected_movement_to_ball <-
players |> 
  filter(defensive_team == club) |> 
  mutate(color = ifelse(is_football != "football", distance_to_ball, NA)) |> 
  select(distance_to_ball, display_name, x, y, x_going, y_going, x_ball, y_ball,x_ball_next, y_ball_next, color,  absolute_yardline_number, ball_carrier, play_id, time, play_description, is_football, club, distance_to_ball, v_approach) %>% 
  filter(is_football == "not_football") %>% 
  
  ggplot(aes(x = x, y = y, color = is_football)) +
  gg_field(yardmin = los_values[1]-3, yardmax = los_values[2]+3, buffer = 0) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "yellow", linewidth = 2, alpha = .75) +
  geom_segment(aes(xend = x_ball_next, yend = y_ball_next), color = "black") +
  geom_segment(data = players_football, aes(xend = x_going, yend = y_going), color = "black") +
  geom_point(size = 3, show.legend = FALSE, fill = "dodgerblue", shape = 21, color = "black") +
  geom_point(data = players_football, size = 3, show.legend = FALSE, color = "brown", fill = "brown", shape = 17) +
  transition_time(time) + ease_aes("linear") +
  labs(y = "", x = "") 


projected_movement_to_ball_anim <- animate(projected_movement_to_ball, width = 466, height = 350, nframes = 100)

anim_save("05-presentation-files/projected_movement_to_ball.gif", animation = projected_movement_to_ball_anim)

```

## Speed Vector Similarity

```{r}

v_approach <-
players |> 
  filter(defensive_team == club) |> 
  select(distance_to_ball, display_name, x, y, x_ball, y_ball, color, absolute_yardline_number, ball_carrier, play_id, time, play_description, is_football, club, distance_to_ball, v_approach) %>% 
  filter(is_football == "not_football") %>%
{
  ggplot(data = ., aes(x = x, y = y, color = v_approach)) +
  gg_field(yardmin = los_values[1]-3, yardmax = los_values[2]+3, buffer = 0) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "yellow", linewidth = 2, alpha = .75) +
  geom_point(size = 5) +
  geom_point(data = players_football, size = 5, show.legend = FALSE, color = "brown", fill = "brown", shape = 17) +
  scale_color_gradient2(na.value = "dodgerblue", low = "green", high = "green", mid = "red", midpoint = 0, guide = "none") +
  transition_time(time) + ease_aes("linear") +
  labs(y = "", x = "", title = str_wrap(.$play_description[1], width = 80)) 
}

v_approach_anim <- animate(v_approach, width = 800, height = 600, nframes = 100)

anim_save("05-presentation-files/v_approach_anim.gif", animation = v_approach_anim)


```



## Orientation Fan

```{r}

orientation_fan_3 <-
players |> 
  filter(defensive_team == club) |> 
    mutate(color = ifelse(ball_in_fan3 == "yes", "No", "Yes")) |> 
  select(distance_to_ball, display_name, x, y, x_going, y_going, x_ball, y_ball,x_left, x_right, y_left, y_right, color,  absolute_yardline_number, ball_carrier, play_id, time, play_description, is_football, club, distance_to_ball, v_approach) %>% 
  filter(is_football == "not_football") %>% 

  ggplot(data = ., aes(x = x, y = y, group = display_name, fill = color)) +
  gg_field(yardmin = los_values[1]-3, yardmax = los_values[2]+3, buffer = 0) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "yellow", linewidth = 2, alpha = .75) +
  geom_point(size = 3, show.legend = FALSE, shape = 21, color = "black") +
  scale_fill_manual(values = c("No" = "pink", "Yes" = my_custom_blue), na.value = "black") +
  geom_point(data = players_football, size = 3, show.legend = FALSE, color = "brown", fill = "brown", shape = 17) +
  geom_segment(aes(xend = x_left, yend = y_left), arrow = arrow(length = unit(0.02, "npc")), color = "purple", show.legend = FALSE) +
  geom_segment(aes(xend = x_right, yend = y_right), arrow = arrow(length = unit(0.02, "npc")), color = "purple", show.legend = FALSE) +
  transition_time(time) + ease_aes("linear") +
  labs(y = "", x = "") 


orientation_fan_3_anim <- animate(orientation_fan_3, width = 466, height = 350, nframes = 100)

anim_save("05-presentation-files/orientation_fan_3.gif", animation = orientation_fan_3_anim)
```


## Projected Movement with Orientation Fan

```{r}
projected_movement_with_fan <-
players |> 
  filter(defensive_team == club) |> 
    mutate(color = ifelse(ball_in_fan3 == "yes", "No", "Yes")) |> 
  select(distance_to_ball, display_name, x, y, x_going, y_going, x_ball, y_ball,x_left, x_right, y_left, y_right, color,  absolute_yardline_number, ball_carrier, play_id, time, play_description, is_football, club, distance_to_ball, v_approach) %>% 
  filter(is_football == "not_football") %>% 
{
  ggplot(data = ., aes(x = x, y = y, group = display_name, color = color)) +
  gg_field(yardmin = los_values[1]-3, yardmax = los_values[2]+3, buffer = 0) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "yellow", linewidth = 2, alpha = .75) +
  geom_point(size = 5, show.legend = FALSE) +
  scale_color_manual(values = c("No" = "pink", "Yes" = my_custom_blue), na.value = "black") +
  geom_point(data = players_football, size = 5, show.legend = FALSE, color = "brown", fill = "brown", shape = 17) +
  geom_segment(aes(xend = x_going, yend = y_going), arrow = arrow(length = unit(0.03, "npc")), color = "black") +
  geom_segment(aes(xend = x_left, yend = y_left), arrow = arrow(length = unit(0.02, "npc")), color = "purple") +
  geom_segment(aes(xend = x_right, yend = y_right), arrow = arrow(length = unit(0.02, "npc")), color = "purple") +
  transition_time(time) + ease_aes("linear") +
  labs(y = "", x = "", title = str_wrap(.$play_description[1], width = 80)) 
}

projected_movement_with_fan_anim <- animate(projected_movement_with_fan, width = 800, height = 600, nframes = 100)

anim_save("05-presentation-files/projected_movement_with_fan_anim.gif", animation = projected_movement_with_fan_anim)


```

<!-- ## -->

<!-- <iframe width="560" height="315" src="https://www.youtube.com/embed/X3N2tcxgUAM?si=2qHa5V12JeAeXSu_&amp;start=12" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe> -->




## Positions

```{r}
positions_static <-
week_1 |> 
  filter(game_idplay_id == stub) |> 
  filter(frame_id == 1) |>
  filter(defensive_team == club | is_football == "football") |>
  mutate(position = ifelse(is.na(position), "Football", as.character(position))) |> 
  mutate(color = ifelse(is_football != "football", distance_to_ball, NA)) |>
  select(game_id, display_name, x, y, v_approach, color, absolute_yardline_number, ball_carrier, play_id, time, is_football, club, distance_to_ball, play_description, x_going, y_going, position) %>%

  ggplot(aes(x = x, y = y, fill = fct_relevel(position, "Football"))) +
  gg_field(yardmin = los_values[1]+5, yardmax = los_values[2]-4, buffer = 0) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "yellow", linewidth = 2, alpha = .75) +
  geom_point(size = 5, show.legend = TRUE, shape = 21, color = "black") +
  labs(y = "", x = "", title = "", fill = "Position") +
  theme(legend.position = "left")


ggsave(filename = "05-presentation-files/positions_static.png", plot = positions_static, width = 10, height = 8, dpi = 300)
```

## Start Points

```{r}
hdr_start_points <-
week_1 |> 
  filter(str_detect(event, "snap")) |> 
  filter(club != possession_team) |> 
  select(position, x, y, yardline_number, absolute_yardline_number, event) |> 
  mutate(x_from_los = abs(absolute_yardline_number - x)) |> 
  ggplot(aes(x = x_from_los + 65, y = y)) +
  gg_field(yardmin = 60, yardmax = 85,buffer = 0) +
  ggdensity::geom_hdr() +
  theme(legend.position = "none") +
  labs(x = "", y = "")

ggsave(filename = "05-presentation-files/hdr_start_points.png", plot = hdr_start_points, width = 10, height = 8, dpi = 300)
```

## Alignment Clusters

```{r}
assignment_clusters <-
defensive_model_building_data |> 
  filter(str_detect(event, "snap")) |> 
  filter(club != possession_team) |> 
  select(position, x, y, yardline_number, absolute_yardline_number, event, frame_id, alignment_cluster) |> 
  mutate(x_from_los = abs(absolute_yardline_number - x)) |> 
  filter(frame_id == 6) %>% 

  ggplot(data = ., aes(x = x_from_los + 65, y = y, color = alignment_cluster)) +
  gg_field(yardmin = 63, yardmax = 90,buffer = 0) +
  geom_point(show.legend = FALSE, size = 1)
  # labs(color = "Cluster")


ggsave(filename = "05-presentation-files/assignment_clusters.png", plot = assignment_clusters, width = 10, height = 8, dpi = 300)

```



