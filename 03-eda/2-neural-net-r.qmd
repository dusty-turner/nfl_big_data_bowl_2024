---
title: "Neural-net"
author: "Dusty Turner"
format: html
engines:
  R: true
  python: true
cache: true
warning: false
message: false
---

## Testing

```{r}
library(tidyverse)
library(keras)
library(tensorflow)
library(reticulate)
library(data.table)
library(gganimate)
library(arrow)

source(here::here("03-eda","0-source-functions.R"))
if(digest::sha1(read_lines(here::here("03-eda", "1-data-cleaning.R"))) != read_lines(here::here("02-clean-data", "cleaninghash.txt"))){
  source(here::here("03-eda", "1-data-cleaning.R"))
} else {
  defensive_model_building_data <- read_parquet(here::here("02-clean-data", "defensive_model_building_data.parquet"))
  week_1 <- read_parquet(here::here("02-clean-data", "week_1.parquet"))
}

if (Sys.info()["user"] == "dusty_turner1") {
  mod <- read_rds(here::here("04-models", "model_data.rds"))
  x_train <- mod$x_train
  y_train <- mod$y_train
  max_length <- mod$max_length
  num_features <- dim(x_train)[3]
  x_test <- mod$x_test
  y_test <- mod$y_test
  time_steps <- mod$time_steps
  num_samples <- mod$num_samples
  tracking_test <- mod$tracking_test
  test_data <- mod$test_data
}

```

```{r}
deff <-
defensive_model_building_data %>% 
  # filter(is.na(pass_result)) |>
  # filter(frame_id >= 5) |> 
  filter(frames_from_tackle <=0) |> 

  # filter(frames_from_tackle >=-5) %>% 

  ## end finds frames from tackle
  mutate(position = as.character(position)) %>%
  mutate(position = replace_na(position, "unknown")) %>%
  mutate(position = factor(position)) |> 
  select(c(x,y,distance_to_ball, distance_to_ball_next, x_going, y_going, s, a, o, dir, x_ball, y_ball, x_ball_next, y_ball_next, s_ball, o_ball, dir_ball, angle_to_ball,
           position, offense_formation, quarter, down, rank, 
           alignment_cluster, play_type,
           defenders_in_the_box, ball_in_fan3, ball_in_fan2, ball_in_fan1, pass_probability, yards_to_go, x_from_los, height, weight, tackle, frames_from_tackle, game_id, play_id, nfl_id, frame_id, display_name, game_idplay_id)) 

library(mltools)
library(data.table)

should_be_factors <- c("ball_in_fan3", "ball_in_fan2", "ball_in_fan1", "position", "offense_formation", "quarter", "down", "rank", "defenders_in_the_box","alignment_cluster", "play_type")

continuous_factors <- c("x", "y", "x_ball", "y_ball", "s", "a", "o", "distance_to_ball", "x_going", "y_going", "dir", "x_ball_next", "y_ball_next", "s_ball", "o_ball", "dir_ball", "angle_to_ball", "pass_probability",  "yards_to_go", "x_from_los", "height", "weight")

discrete_factors <- c("quarter", "position", "offense_formation", "down", "rank", "defenders_in_the_box", 
                      "ball_in_fan3", "ball_in_fan2", "ball_in_fan1",
                      "alignment_cluster", "play_type")

non_centered_newdata <-
  deff |> 
  mutate(across(.cols = all_of(should_be_factors), ~as.factor(.))) |> 
  mutate(tackle = as.numeric(as.character(tackle))) |> 
  mutate(across(.cols = all_of(should_be_factors), .fns = ~if_else(is.na(.), "unknown", .))) |> 
  mutate(across(.cols = all_of(should_be_factors), ~as.factor(.))) |> 
  as.data.table() |> one_hot() |> 
  as_tibble() |> 
  mutate(across(.cols = where(is.character), .fns = ~as.factor(.))) |> 
  mutate(across(.cols = where(is.numeric), .fns = ~if_else(is.nan(.), NA, .))) |> 
  mutate(across(.cols = where(is.numeric), .fns = ~if_else(is.infinite(.), NA, .))) |> 
  mutate(across(.cols = where(is.numeric), .fns = ~if_else(is.na(.), mean(., na.rm = T), .))) |> 
  mutate(game_id = as.numeric(as.character(game_id))) |> 
  mutate(play_id = as.numeric(as.character(play_id))) |> 
  group_by(game_id, play_id, display_name, frame_id) |> ## because one play had two of these per player/frame for some reason
  mutate(x_from_los = mean(x_from_los)) |> 
  ungroup() |> 
  distinct(.keep_all = TRUE) |> 
  select(game_id,play_id, display_name, frame_id, all_of(continuous_factors), all_of(contains(discrete_factors)), tackle) |> 
  arrange(game_id, play_id, frame_id, display_name) 
  # select(game_id,play_id, display_name, frame_id, x, y, x_ball, y_ball, s, a, o, distance_to_ball, x_going, y_going, dir, x_ball_next, y_ball_next, s_ball, o_ball, dir_ball, angle_to_ball, pass_probability, tackle) |> 

newdata <- 
  non_centered_newdata |> 
  mutate(across(.cols = all_of(continuous_factors),  .fns = ~ (. - mean(.)) / sd(.))) 
```

### Shape up Data

```{r}

# Function to extract play data for a given game and play id
get_play_data <- function(game_id_arg = 2022091112, play_id_arg = 86, df = newdata, 
                          num_features_per_player_arg = num_features_per_player) {
    # Select and arrange relevant data
    play_data <- df %>%
        filter(game_id == game_id_arg, play_id == play_id_arg) %>%
        arrange(frame_id, display_name)

    # Determine the number of unique frames and players
    num_frames <- length(unique(play_data$frame_id))
    num_players <- length(unique(play_data$display_name))

    # Initialize a matrix to store play data
    play_matrix <- matrix(nrow = num_frames, ncol = num_players * num_features_per_player)
dim(play_matrix)
    # Populate the matrix with data for each frame
    for (i in seq_len(num_frames)) {
        frame_data <- play_data %>%
            filter(frame_id == unique(play_data$frame_id)[i]) %>%
            select(all_of(continuous_factors), contains(discrete_factors))
            # select(x, y, x_ball, y_ball, s, a, o, distance_to_ball)
        play_matrix[i, ] <- as.numeric(t(frame_data))
    }
    play_matrix
}

num_features_per_player <- newdata |> select(-c(game_id, play_id, display_name, frame_id, tackle)) |> ncol()

# Extract unique game and play combinations from the dataset
example_play <- distinct(newdata, game_id, play_id) 

# Generate a list of matrices for each play

x_list <- x_list_maker()

# Determine the maximum sequence length and pad all sequences
max_length <- max(sapply(x_list, nrow))

pad_time_series <- function(x, max_length) {
    n_pad <- max_length - nrow(x)
    pad_matrix <- matrix(0, nrow = n_pad, ncol = ncol(x))
    rbind(x, pad_matrix)
}

x_padded <- lapply(x_list, pad_time_series, max_length = max_length)

# Function to create target matrices for each play
create_target_matrix <- function(game_id_arg, play_id_arg, df, padded_length) {
    # Filter and arrange data, then transform to wide format
    target_matrix <- df %>%
        filter(game_id == game_id_arg, play_id == play_id_arg) %>%
        arrange(frame_id, display_name) %>%
        select(display_name, tackle) %>%
        distinct() %>%
        pivot_wider(names_from = display_name, values_from = tackle) %>%
        mutate(n_rows = padded_length) %>%
        uncount(n_rows) %>%
        as.matrix()

    # Set column names for clarity
    colnames(target_matrix) <- paste0("Player ", 1:11)
    target_matrix
}

# Generate target matrices for each play

y_padded <- y_list_maker()

# Function to create a tracking array indicating the presence of data per player
create_tracking_array <- function(x, max_length, num_players) {
    tracking_array <- array(0, dim = c(max_length, num_players))
    if (nrow(x) > 0) {
        tracking_array[1:nrow(x), ] <- 1
    }
    tracking_array
}

# Generate tracking arrays for each play
tracking_list <- lapply(x_list, create_tracking_array, max_length = max_length, num_players = 11)

# Reshape x_padded into a 3D array
num_samples <- length(x_padded)
time_steps <- max_length  # Assuming max_length is already defined
num_features <- ncol(x_padded[[1]])

x_data <- array(dim = c(num_samples, time_steps, num_features))
for (i in 1:num_samples) {
  x_data[i, , ] <- x_padded[[i]]
}

# Reshape y_padded into a 3D array
# Assuming y_padded is structured similarly to x_padded
y_data <- array(dim = c(length(y_padded), max_length, ncol(y_padded[[1]])))
for (i in 1:length(y_padded)) {
  y_data[i, , ] <- y_padded[[i]]
}

beepr::beep()

```

### Spliting and Identifying Data

```{r}

# Splitting data into training and testing sets
set.seed(123)  # For reproducibility
train_indices <- sample(seq_len(num_samples), size = 0.7 * num_samples)
test_indices <- setdiff(seq_len(num_samples), train_indices)

x_train <- x_data[train_indices, , ]
y_train <- y_data[train_indices, , ]
x_test <- x_data[test_indices, , ]
y_test <- y_data[test_indices, , ]

test_plays <- example_play[-train_indices, ]
test_data <- non_centered_newdata %>%
  semi_join(test_plays, by = c("game_id", "play_id"))

# Apply the function to each element in x_list for tracking
num_players <- 11  # Adjust if necessary
tracking_list <- lapply(x_list, create_tracking_array, max_length = max_length, num_players = num_players)

# Filter out the tracking arrays for the test set

tracking_test <- tracking_list[test_indices]


# if (Sys.info()["user"] == "dusty_turner1") {
#   write_rds(list(x_train = x_train, y_train = y_train, x_test = x_test, y_test = y_test, test_data = test_data, max_length = max_length, time_steps = time_steps, num_samples = num_samples, tracking_test = tracking_test), "04-models/model_data.rds")
# }

```


## Build Model

```{r}
run_nn <- function(units_param = 50, rate_param = .5, l2_value_param = .01, epochs_param = 10, 
                   optimizer_param = 'adam', positive_weight_param = 11,
                   layers_param = 3, batch_size_param = 441/1, notes_param = NULL){

  keras::backend()$clear_session()

  positive_weight <- positive_weight_param
  
  raw_tracker <-
    read_csv(here::here("04-models", "model_tracker.csv")) 
    raw_tracker |> 
    filter(epochs == epochs_param, units == units_param, rate == rate_param, 
           l2_value == l2_value_param,
           # activation == activation_param,
           optimizer == optimizer_param, layers == layers_param) %>%
      mutate(model_execution_time = as.character(model_execution_time)) |> 
    print()
    

model <- keras_model_sequential() %>%
  layer_masking(mask_value = 0, input_shape = c(time_steps, num_features)) %>%
  layer_lstm(units = units_param, return_sequences = TRUE, unroll = FALSE,
             kernel_regularizer = regularizer_l2(l2_value_param),
             recurrent_regularizer = regularizer_l2(l2_value_param)) %>%
  layer_dropout(rate = rate_param) %>%
    layer_lstm(units = units_param, return_sequences = TRUE, unroll = FALSE,
             kernel_regularizer = regularizer_l2(l2_value_param),
             recurrent_regularizer = regularizer_l2(l2_value_param)) %>%
  layer_dropout(rate = rate_param) %>%
  time_distributed(layer_dense(units = 11, activation = 'sigmoid'))

# model <- keras_model_sequential() %>%
#   layer_masking(mask_value = 0, input_shape = c(time_steps, num_features)) %>%
#   layer_lstm(units = units_param, return_sequences = TRUE, unroll = FALSE) %>%
#   layer_dropout(rate = rate_param) %>%
#     layer_lstm(units = units_param, return_sequences = TRUE, unroll = FALSE) %>%
#   layer_dropout(rate = rate_param) %>%
#   layer_lstm(units = units_param, return_sequences = TRUE, unroll = FALSE) %>%
#   layer_dropout(rate = rate_param) %>%
#   time_distributed(layer_dense(units = 11, activation = 'sigmoid'))

    
# Compile the model
model %>% compile(
  loss = weighted_binary_crossentropy,
  optimizer = optimizer_adam(learning_rate = 0.001),
  metrics = list(
    custom_accuracy,       # Assuming this is a predefined metric
    metric_precision(),    # Precision
    metric_recall(),       # Recall
    # f1_score,              # F1 Score (custom)
    metric_auc()          # AUC-ROC
    # log_loss               # Log Loss (custom)
  )
)

model_start_time <- tictoc::tic()

# Train the model
history <- model %>% fit(
  x = x_train, y = y_train,
  epochs = epochs_param,
  batch_size = batch_size_param,
  validation_data = list(x_test, y_test)
  # callbacks = list(
    # early_stop_callback,
    # model_checkpoint_callback,
    # reduce_lr_callback
  #   # tensorboard_callback,
  #   # csv_logger_callback
  # )
)

model_end_time <- tictoc::toc()
model_execution_time <- (model_end_time$toc - model_end_time$tic)[[1]]  # Calculate execution time for model building and training

final_accuracy <- history$metrics$python_function[length(history$metrics$precision)]
final_precision <- history$metrics$precision[length(history$metrics$precision)]
final_recall <- history$metrics$recall[length(history$metrics$recall)]
final_f1_score <- history$metrics$f1_score[length(history$metrics$f1_score)]
final_auc <- history$metrics$auc[length(history$metrics$auc)]
final_log_loss <- history$metrics$log_loss[length(history$metrics$log_loss)]

now_time <- now()
formatted_time <- format(now_time, "%Y-%m-%d_%H-%M-%S")


tibble(
  accuracy = final_accuracy, precision = final_precision, recall = final_recall, f1_score = final_f1_score, auc = final_auc, 
  log_loss = final_log_loss,epochs = epochs_param, units = units_param, layers = layers_param,l2_value = l2_value_param,
  optimizer = optimizer_param, rate = rate_param, time = now_time, user = Sys.info()["user"], 
  positive_weight_param = positive_weight_param,model_execution_time = model_execution_time, notes = notes_param
) |> 
    bind_rows(raw_tracker) |> 
    arrange(desc(time)) |> 
    print() |> 
    write_csv(here::here("04-models", "model_tracker.csv"))

save_model_tf(model, str_c("04-models/", formatted_time))

return(list(model = model, history = history))  
  
}

ratio <-
newdata %>% 
  count(tackle) %>% 
  reframe(perc = n / sum(n)) %>% 
  slice(1) %>% pull(perc) * 10

out <- run_nn(
  epochs_param = 500,
  units_param = 400,
  rate_param = .75,
  l2_value_param = .001,
  # l2_value_param = 0,
  layers_param = 3,
  batch_size_param = 7028/2,
  positive_weight_param = ratio,
  # positive_weight_param = ratio,
  notes_param = "add in play type 2 layers 500 epoch",
  optimizer_param = "adam"
  # activation_param = "relu"
)


epoch_values <- c(10000)
rate_values <- c(.5,.75)
l2_values <- c(.001)
positive_weight_value <- c(ratio)
units_value <- c(400)

# Generate all combinations
set.seed(123)
param_grid <- expand.grid(epochs_param = epoch_values,
                          rate_param = rate_values,
                          l2_value_param = l2_values,
                          units_param = units_value,
                          positive_weight_param = positive_weight_value)  

  # sample_n(35)

pmap(param_grid, function(epochs_param, rate_param, l2_value_param, units_param, positive_weight_param) {
  run_nn(
    epochs_param = epochs_param,
    units_param = units_param,  # Assuming a fixed value
    rate_param = rate_param,
    l2_value_param = l2_value_param,
    layers_param = 2,  # Assuming a fixed value
    batch_size_param = 7028,  # Assuming a fixed value
    notes_param = "Hyperparameter tuning 1111",
    positive_weight_param = positive_weight_param,
    optimizer_param = "adam"  # Assuming a fixed value
    # activation_param = "relu"  # Uncomment if needed
  )
})

# View the training history
plot(out$history) + xlim(0,430)
# history$metrics |> as_tibble() |> print(n = Inf)
```


```{r}
model2 <- load_model_tf("04-models/2024-01-07_16-03-36", custom_objects = list(
  # model2 <- load_model_tf("04-models", custom_objects = list(
    weighted_binary_crossentropy = weighted_binary_crossentropy,
    python_function = weighted_binary_crossentropy
))
```

### Accuracy


```{r}
# Predict on test data

y_pred_test <- out$model %>% predict(x_test)
y_pred_test <- model2 %>% predict(x_test)

# Binarize predictions (since we used a sigmoid activation, the output is a probability)
y_pred_binarized <- array(ifelse(y_pred_test > 0.5, 1, 0), dim(y_pred_test))

# Calculate accuracy
accuracy <- sum(y_pred_binarized == y_test) / length(y_test)

# Print accuracy
print(paste("Accuracy:", accuracy))

# Flatten the tracking arrays for the test set
tracking_test_flat <- array_reshape(do.call(cbind, tracking_test), c(dim(y_pred_test)[1] * dim(y_pred_test)[2] * dim(y_pred_test)[3]))

  # Flatten your model predictions in a similar manner
predictions_flat <- array_reshape(y_pred_test, c(dim(y_pred_test)[1] * dim(y_pred_test)[2] * dim(y_pred_test)[3]))

# Now, filter out padded predictions using the tracking data
final_predictions <- predictions_flat[tracking_test_flat == 1]


test_joined_with_preds <-
test_data |> 
  arrange(game_id, play_id, frame_id, display_name) |>
  mutate(game_id = as.character(game_id)) |> 
  mutate(play_id = as.character(play_id)) |> 
  mutate(tackle = as.factor(tackle)) |> 
  mutate(final_predictions = as.double(final_predictions)) |> 
  mutate(binary_predictions = as.factor(ifelse(final_predictions> .5, 1, 0))) |> 
  mutate(game_idplay_id = str_c(game_id, play_id))

test_joined_with_preds <- 
test_joined_with_preds %>% 
  select(game_id,play_id, frame_id, display_name, final_predictions, binary_predictions) %>% 
  left_join(week_1) %>% 
  mutate(tackle = as.factor(tackle)) 
  

test_joined_with_preds |> 
  count(binary_predictions)

test_joined_with_preds |> 
group_by(play_type) %>%
  yardstick::accuracy(truth = tackle, estimate = binary_predictions) %>%
  print(n = Inf)

test_joined_with_preds |> 
  group_by(play_type) %>%
  yardstick::precision(truth = tackle, estimate = binary_predictions) 

test_joined_with_preds |> 
  group_by(play_type) %>%
  yardstick::recall(truth = tackle, estimate = binary_predictions)


test_joined_with_preds |> 
  mutate(game_idplay_id = str_c(game_id,play_id)) %>% 
  # group_by(game_id, play_id) |>
  filter(game_idplay_id=="2022090800167") %>% 
  select(display_name, tackle, final_predictions, binary_predictions, jersey_number) |> 
  arrange(display_name) |> 
  print(n = Inf)
```

```{r}
# write_rds(test_joined_with_preds,"04-models/test_joined_with_preds_2024-01-07_16-03-36.rds")
```



```{r}

library(pROC)

# Creating the ROC object
roc_result<- roc(response = test_joined_with_preds$tackle, predictor = test_joined_with_preds$final_predictions)

# Calculating the AUC
auc_value <- auc(roc_result)

# Plotting the ROC curve
ggplot(data = data.frame(fpr = 1 - roc_result$specificities, tpr = roc_result$sensitivities), aes(x = fpr, y = tpr)) +
  geom_line() +
  geom_abline(linetype = "dashed") +
  labs(x = "False Positive Rate", y = "True Positive Rate", title = "ROC Curve") +
  annotate("text", x = 0.6, y = 0.4, label = paste("AUC =", round(auc_value, 2)))


```


## Animations

```{r}
library(gganimate)

# Assuming week_1 is your data frame
animated_plot <-
  week_1 %>% 
    filter(game_idplay_id == "2022090800167") %>%  
  left_join(test_joined_with_preds %>% select(game_id, play_id, display_name, frame_id, final_predictions), by = c("game_id", "play_id", "display_name", "frame_id")) %>% 
  filter(!is.na(final_predictions)) %>% 
  group_by(game_id, play_id) %>% 
  # filter(cur_group_id() == 4) |> pull(game_idplay_id)
  ungroup()  |> 
  select(frame_id, final_predictions, jersey_number, tackle) |>
  ggplot(aes(x = frame_id, y = final_predictions)) + 
  geom_line() +
  geom_point(show.legend = FALSE, size = 3) + 
  facet_wrap(~jersey_number) +
  transition_reveal(frame_id)

anm1 <- animate(animated_plot, width = 800, height = 600, nframes = 100)

animated_plot2 <-
week_1 |> 
  filter(game_idplay_id=="2022090800167") %>% 
  # filter(play_id %in% test_joined_with_preds$play_id) |> 
  # filter(game_id %in% test_joined_with_preds$game_id) |> 
  left_join(
    test_joined_with_preds |> select(game_id, play_id, display_name, frame_id, final_predictions) |> 
      mutate(final_predictions = ifelse(is.na(final_predictions), 0, final_predictions))
    ) |> 
  group_by(game_id, play_id) |> 
  # filter(cur_group_id() == 4) |>
  # filter(frame_id >=5) |> 
  filter(frame_id <= max(frame_id)-4) |>
  mutate(final_predictions = ifelse(club == defensive_team & is.na(final_predictions), 0, final_predictions)) |> 
  ungroup()  |> 
  # select(final_predictions) %>% filter(!is.na(final_predictions)) %>% print(n = Inf)
  mutate(color = final_predictions) |> 
  mutate(jersey_number = ifelse(defensive_team == club, jersey_number, "")) |> 
  select(display_name, distance_to_ball, x, y, color, absolute_yardline_number, ball_carrier, play_id, time, play_description, is_football, club, jersey_number, final_predictions, defensive_team, frame_id) %>%
  # filter(!is.na(final_predictions)) %>% pull(color) %>% range()
{
  ggplot(data = ., aes(x = x, y = y, color = color)) +
      # ggplot(aes(x = x, y = y, color = color)) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "blue") +
  geom_point(aes(shape = is_football), size = 3, show.legend = FALSE) +
  geom_text(aes(label = jersey_number), color = "black", nudge_y = -1) +
  scale_color_gradient(low = "grey", high = "black", na.value = "dodgerblue") +
  transition_time(time) + ease_aes("linear") +
  labs(y = "", x = "Yards To Endzone", title = str_wrap(.$play_description[1], width = 80)) +
  theme_field
}

anm2 <- animate(animated_plot2, width = 800, height = 600, nframes = 100)

# nn_briar <- 
  test_joined_with_preds |>
    mutate(game_idplay_id = str_c(game_id, play_id)) |> 
  select(game_idplay_id, display_name,tackle, final_predictions) |> 
  filter(!is.na(final_predictions)) |> 
  mutate(tackle  = as.integer(as.character(tackle))) |> 
  mutate(part = tackle - final_predictions)   |> 
  group_by(game_idplay_id, display_name)  |> 
  summarise(mean_error_play = mean(part)) |> 
  group_by(display_name) |> 
  summarise(average_tackles_over_expected = mean(mean_error_play), n = n()) |> 
  arrange(-average_tackles_over_expected) |> 
  filter(n >= 10)
    
  

```


