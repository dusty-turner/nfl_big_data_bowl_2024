---
title: "Neural-net"
author: "Dusty Turner"
format: html
engines:
  R: true
  python: true
cache: true
warning: false
message: false
---

## Testing

```{r}
library(tidyverse)
library(gganimate)
library(arrow)
source(here::here("03-eda","ggtheme_field.R"))

test_joined_with_preds <- read_rds(here::here("04-models", "test_joined_with_preds_2024-01-07_16-03-36.rds"))
week_1 <- read_parquet(here::here("02-clean-data", "week_1.parquet"))
defensive_model_building_data <- read_parquet(here::here("02-clean-data", "defensive_model_building_data.parquet"))


model2 <- load_model_tf("04-models/2024-01-07_16-03-36", custom_objects = list(
  # model2 <- load_model_tf("04-models", custom_objects = list(
    weighted_binary_crossentropy = weighted_binary_crossentropy,
    python_function = weighted_binary_crossentropy
))
```


```{r}
vectors <- NULL
for (i in 1:10) {
  # Create a vector of 10 ones
  vector <- rep(1, 10)
  
  # Replace the ith element with 2
  vector[i] <- 2
  
  # Add the vector to the list
  vectors[[i]] <- vector
}

example_play <- distinct(newdata, game_id, play_id) 

pad_time_series <- function(x, max_length) {
    n_pad <- max_length - nrow(x)
    pad_matrix <- matrix(0, nrow = n_pad, ncol = ncol(x))
    rbind(x, pad_matrix)
}

create_target_matrix <- function(game_id_arg, play_id_arg, df, padded_length) {
    # Filter and arrange data, then transform to wide format
    target_matrix <- df %>%
        filter(game_id == game_id_arg, play_id == play_id_arg) %>%
        arrange(frame_id, display_name) %>%
        select(display_name, tackle) %>%
        distinct() %>%
        pivot_wider(names_from = display_name, values_from = tackle) %>%
        mutate(n_rows = padded_length) %>%
        uncount(n_rows) %>%
        as.matrix()

    # Set column names for clarity
    colnames(target_matrix) <- paste0("Player ", 1:11)
    target_matrix
}

create_tracking_array <- function(x, max_length, num_players) {
    tracking_array <- array(0, dim = c(max_length, num_players))
    if (nrow(x) > 0) {
        tracking_array[1:nrow(x), ] <- 1
    }
    tracking_array
}

these_are_test_set <-
example_play |> 
  mutate(id = row_number()) |> 
  filter(id %in% sort(test_indices)) |> 
  mutate(game_idplay_id = str_c(game_id, play_id))

test_set_data_for_tor <-
newdata |> 
  mutate(game_idplay_id = str_c(game_id, play_id)) |> 
  filter(game_idplay_id %in% these_are_test_set$game_idplay_id)

# double_creater(player_number = 1, vec = vectors[5])

double_creater <- function(player_number, vec){

  print(player_number)
  print(vec)
  
with_double_player <-
test_set_data_for_tor |> 
  group_by(game_idplay_id, frame_id) |>
  filter(row_number() != player_number) |> 
  mutate(id = vec) |> 
  # mutate(id = c(2,1,1,1,1,1,1,1,1,1)) |> 
  ungroup() |> 
  relocate(game_idplay_id, id)  |> 
  uncount(id) |> 
  select(-game_idplay_id)



player_removed <-
test_set_data_for_tor |> 
  group_by(game_idplay_id, frame_id) |> 
  filter(row_number() == player_number) |> 
  ungroup()  |> 
  select(game_idplay_id, display_name) |> 
  distinct()


example_play_1 <-
with_double_player |> 
  distinct(game_id, play_id)

x_list_1 <-
    map2(
      .x = example_play_1$game_id,
      .y = example_play_1$play_id,
      .f = ~ get_play_data(.x, .y, newdata, num_features_per_player_arg = num_features_per_player),
      .progress = TRUE
    )



y_padded_1 <-
    map2(
      .x = example_play_1$game_id,
      .y = example_play_1$play_id,
      .f = ~ create_target_matrix(.x, .y, newdata, padded_length = max_length),
      .progress = TRUE
    )

x_padded_1 <- lapply(x_list_1, pad_time_series, max_length = max_length)

x_data_1 <- array(dim = c(length(x_padded_1), time_steps, num_features))
for (i in 1:length(x_padded_1)) {
  x_data_1[i, , ] <- x_padded_1[[i]]
}

y_data_1 <- array(dim = c(length(y_padded_1), max_length, ncol(y_padded_1[[1]])))
for (i in 1:length(y_padded_1)) {
  y_data_1[i, , ] <- y_padded_1[[i]]
}

tracking_list_1 <- lapply(x_list_1, create_tracking_array, max_length = max_length, num_players = 11)
tracking_test_1 <- tracking_list_1

y_pred_test_1 <- model2 %>% predict(x_data_1)

y_pred_binarized_1 <- array(ifelse(y_pred_test_1 > 0.5, 1, 0), dim(y_pred_test_1))

# Calculate accuracy
# accuracy_1 <- sum(y_pred_binarized_1 == y_data_1) / length(y_data_1)

# Print accuracy
# print(paste("Accuracy:", accuracy_1))

# Flatten the tracking arrays for the test set
tracking_test_flat_1 <- array_reshape(do.call(cbind, tracking_test_1), c(dim(y_pred_test_1)[1] * dim(y_pred_test_1)[2] * dim(y_pred_test_1)[3]))

# Flatten your model predictions in a similar manner
predictions_flat_1 <- array_reshape(y_pred_test_1, c(dim(y_pred_test_1)[1] * dim(y_pred_test_1)[2] * dim(y_pred_test_1)[3]))

# Now, filter out padded predictions using the tracking data
final_predictions_1 <- predictions_flat_1[tracking_test_flat_1 == 1]

test_joined_with_preds_1 <-
with_double_player |> 
  arrange(game_id, play_id, frame_id, display_name) |>
  mutate(game_id = as.character(game_id)) |> 
  mutate(play_id = as.character(play_id)) |> 
  mutate(tackle = as.factor(tackle)) |> 
  mutate(final_predictions_1 = as.double(final_predictions_1)) |> 
  mutate(binary_predictions_1 = as.factor(ifelse(final_predictions_1> .5, 1, 0))) |> 
  mutate(game_idplay_id = str_c(game_id, play_id))

test_joined_with_preds_1 |> 
  select(game_idplay_id, display_name, frame_id, tackle, final_predictions_1) |> 
  left_join(test_joined_with_preds |> select(game_idplay_id, display_name, frame_id, final_predictions)) |> 
  group_by(game_idplay_id, frame_id, display_name) |> 
  filter(row_number() != 2) |> 
  ungroup() |> 
  mutate(delta_probability_added = final_predictions - final_predictions_1) |> 
  group_by(game_idplay_id) |> 
  summarise(increase_in_tackle_prob = sum(delta_probability_added)) |> 
  ungroup() |> 
  left_join(player_removed) %>% 
  mutate(player_number = player_number)

}

library(furrr)
plan(multisession, workers = 5)
options(future.globals.maxSize = 10000000000)
tictoc::tic()
player_out_results <-
map2_dfr(.x = sort(rep(1:10, 10)), .y = rep(vectors,10), .f = ~double_creater(player_number = .x, vec = .y), .id = "vector_id", .progress = TRUE)
tictoc::toc()

# player_out_results %>% write_parquet("player_out_results.parquet")
# player_out_results %>% write_rds("player_out_results.rds")

player_probability_increase_by_play <-
player_out_results %>% filter(!is.na(increase_in_tackle_prob)) %>% 
  group_by(game_idplay_id, display_name) %>% 
  summarise(total_increase_in_tackle_prob = mean(increase_in_tackle_prob, na.rm = TRUE)) 

average_probability_increase <-
player_probability_increase_by_play %>% 
  group_by(display_name) %>% 
  summarise(average_play_increase = mean(total_increase_in_tackle_prob), n = n())

average_probability_increase %>% 
  left_join(week_1 %>% select(display_name, position, club) %>% distinct()) %>% 
  filter(n > 19) %>% 
  group_by(club) %>% 
  filter(average_play_increase == min(average_play_increase)) %>% arrange(-average_play_increase)


average_probability_increase %>% 
  left_join(week_1 %>% select(display_name, position, club) %>% distinct()) %>% 
  filter(n > 19) %>% 
  arrange(-average_play_increase)



```

