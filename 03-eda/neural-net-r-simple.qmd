---
title: "Neural-net"
author: "Dusty Turner"
format: html
engines:
  R: true
  python: true
cache: true
warning: false
message: false
---

## Testing

```{r}
library(tidyverse)
library(keras)
library(tensorflow)
library(reticulate)
library(data.table)
library(gganimate)
source(here::here("03-eda","ggtheme_field.R"))
if(digest::sha1(read_lines(here::here("03-eda", "data_cleaning.R"))) != read_lines(here::here("02-clean-data", "cleaninghash.txt"))){
source(here::here("03-eda", "data_cleaning.R"))
} else {
  defensive_model_building_data <- read_rds(here::here("02-clean-data", "data_cleaning_working.RDS"))
  week_1 <- read_rds(here::here("02-clean-data", "week_1.RDS"))
}
```

```{r}
deff <-
defensive_model_building_data %>% 
  filter(is.na(pass_result)) |>
  filter(frame_id >= 5) |> 
  filter(frames_from_tackle <=0) |> 

  
  filter(frames_from_tackle >=-5) %>% 
  
  
  ## end finds frames from tackle
  mutate(position = as.character(position)) %>%
  mutate(position = replace_na(position, "unknown")) %>%
  mutate(position = factor(position)) |> 
  select(c(x,y,distance_to_ball, distance_to_ball_next, x_going, y_going, s, a, o, dir, x_ball, y_ball, x_ball_next, y_ball_next, s_ball, o_ball, dir_ball, angle_to_ball,
           position, offense_formation, quarter, down, rank,
           defenders_in_the_box, ball_in_fan3, ball_in_fan2, ball_in_fan1, pass_probability, yards_to_go, x_from_los, height, weight, tackle, frames_from_tackle, game_id, play_id, nfl_id, frame_id, display_name, game_idplay_id)) 


library(mltools)
library(data.table)

should_be_factors <- c("ball_in_fan3", "ball_in_fan2", "ball_in_fan1", "position", "offense_formation", "quarter", "down", "rank", "defenders_in_the_box")

newdata <-
  deff |> 
  mutate(across(.cols = all_of(should_be_factors), ~as.factor(.))) |> 
  mutate(tackle = as.numeric(as.character(tackle))) |> 
  mutate(across(.cols = all_of(should_be_factors), .fns = ~if_else(is.na(.), "unknown", .))) |> 
  mutate(across(.cols = all_of(should_be_factors), ~as.factor(.))) |> 
  as.data.table() |> one_hot() |> 
  as_tibble() |> 
  mutate(across(.cols = where(is.character), .fns = ~as.factor(.))) |> 
  mutate(across(.cols = where(is.numeric), .fns = ~if_else(is.nan(.), NA, .))) |> 
  mutate(across(.cols = where(is.numeric), .fns = ~if_else(is.infinite(.), NA, .))) |> 
  mutate(across(.cols = where(is.numeric), .fns = ~if_else(is.na(.), mean(., na.rm = T), .))) |> 
  mutate(game_id = as.numeric(as.character(game_id))) |> 
  mutate(play_id = as.numeric(as.character(play_id))) |> 
  select(game_id,play_id, display_name, frame_id, x, y, x_ball, y_ball, distance_to_ball, tackle) |> 
  distinct(.keep_all = TRUE) |> 
  arrange(game_id, play_id, frame_id, display_name)
```

## create matrix forms 

```{r}
get_play_data <- function(game_id_arg, play_id_arg, df, num_features_per_player) {
    # Filter the play data for a specific game and play
    play_data <- df %>%
        filter(game_id == game_id_arg, play_id == play_id_arg) %>%
        arrange(frame_id, display_name)

    # Get unique frame IDs in this play
    frame_ids <- unique(play_data$frame_id)

    # Number of frames in this play
    num_frames <- length(frame_ids)

    # Number of players per frame (assumed to be 11)
    num_players <- length(unique(play_data$display_name))

    # Preallocate matrix for the play
    play_matrix <- matrix(nrow = num_frames, ncol = num_players * num_features_per_player)

    # Group by frame and concatenate player features
    for (i in 1:num_frames) {
        # Get data for each frame using the actual frame_id
        frame_data <- play_data %>%
            filter(frame_id == frame_ids[i]) %>%
            select(x, y, x_ball, y_ball, distance_to_ball)

        # Flatten the frame data into one row
        play_matrix[i, ] <- as.numeric(t(frame_data))
    }
    return(play_matrix)
}




example_play <- newdata |> distinct(game_id, play_id) 

library(furrr)
plan(multisession)

x_list <- future_map2(.x = example_play$game_id, .y = example_play$play_id, .f = ~get_play_data(game_id_arg = .x, play_id_arg = .y, df = newdata, num_features_per_player = 5), .progress = TRUE)

###

create_target_matrix <- function(game_id_arg = example_play$game_id[1], play_id_arg = example_play$play_id[1], df = newdata, padded_length = 6) {
    # Filter data for the specific game and play

    target_matrix <- 
      df %>%
        filter(game_id == game_id_arg, play_id == play_id_arg) %>%
        arrange(frame_id, display_name) |> 
      select(display_name, tackle) |> distinct() |> 
      pivot_wider(names_from = display_name, values_from = tackle) |> 
      mutate(n_rows = padded_length) |> 
      uncount(n_rows) |> 
      as.matrix()
    
    colnames(target_matrix) <- c("Player 1", "Player 2", "Player 3", "Player 4", "Player 5", "Player 6", "Player 7", "Player 8", "Player 9", "Player 10", "Player 11")
    
    return(target_matrix)
}

# Create target matrices
y_list <- future_map2(.x = example_play$game_id, .y = example_play$play_id, .f = ~create_target_matrix(game_id_arg = .x, play_id_arg = .y, df = newdata), .progress = TRUE)

```


```{r}
# Convert lists to arrays
x_data <- array(unlist(x_list), dim = c(length(x_list), nrow(x_list[[1]]), ncol(x_list[[1]])))
y_data <- array(unlist(y_list), dim = c(length(y_list), nrow(y_list[[1]]), ncol(y_list[[1]])))

# x_data[1,,]
# x_train[1,,]
# x_train |> dim()
# y_train |> dim()
# y_train[1,,]

# Split data into training and test sets (70% train, 30% test)
set.seed(123)  # For reproducibility
train_indices <- sample(seq_along(x_list), size = 0.7 * length(x_list))
x_train <- x_data[train_indices,,]
y_train <- y_data[train_indices,,]
test_plays <- example_play[-train_indices, ]
x_test <- x_data[-train_indices,,]
y_test <- y_data[-train_indices,,]

model <- keras_model_sequential() %>%
  layer_lstm(units = 50, return_sequences = TRUE, input_shape = c(nrow(x_list[[1]]), ncol(x_list[[1]]))) %>%
  layer_dropout(rate = 0.2) %>%
  layer_lstm(units = 50, return_sequences = TRUE) %>%
  layer_dropout(rate = 0.2) %>%
  time_distributed(layer_dense(units = 11, activation = 'sigmoid'))  # Change to 11 units


# model <- keras_model_sequential() %>%
#   layer_masking(mask_value = 0, input_shape = c(nrow(x_list[[1]]), ncol(x_list[[1]]))) %>%
#   bidirectional(
#     layer_lstm(units = 50, return_sequences = TRUE),
#     input_shape = c(nrow(x_list[[1]]), ncol(x_list[[1]]))
#   ) %>%
#   layer_dropout(rate = 0.2) %>%
#   bidirectional(layer_lstm(units = 50, return_sequences = TRUE)) %>%
#   layer_dropout(rate = 0.2) %>%
#   bidirectional(layer_lstm(units = 50, return_sequences = TRUE)) %>%
#   layer_dropout(rate = 0.2) %>%
#   time_distributed(layer_dense(units = 11, activation = 'sigmoid'))



# Compile model
model %>% compile(
  loss = 'binary_crossentropy',
  optimizer = 'adam',
  metrics = 'accuracy'
)

# Train model
history <- model %>% fit(
  x_train, y_train,
  epochs = 500,
  batch_size = 6*11,
  validation_data = list(x_test, y_test)
)
```

```{r}
# Predict on test data
y_pred_test <- model %>% predict(x_test)

# Binarize predictions (since we used a sigmoid activation, the output is a probability)
y_pred_binarized <- array(ifelse(y_pred_test > 0.5, 1, 0), dim(y_pred_test))

# Calculate accuracy
accuracy <- sum(y_pred_binarized == y_test) / length(y_test)

# Print accuracy
print(paste("Accuracy:", accuracy))


```


```{r}
test_data <- newdata %>%
  semi_join(test_plays, by = c("game_id", "play_id"))

# Flatten predictions for each play
y_pred_test_flat <- lapply(seq_len(dim(y_pred_test)[1]), function(i) {
  t(y_pred_test[i,,])
})
y_pred_test_flat <- do.call(rbind, y_pred_test_flat)

predictions <- y_pred_test_flat |> t() |> c()

test_joined_with_preds <-
test_data |> 
  mutate(predictions = predictions, tackle = as.factor(tackle)) |> 
  mutate(class = as.factor(ifelse(predictions < .5 , 0 , 1)))

test_joined_with_preds |> 
  yardstick::accuracy(truth = tackle, estimate = class)


library(pROC)

# Creating the ROC object
roc_result<- roc(response = test_joined_with_preds$tackle, predictor = test_joined_with_preds$predictions)

# Calculating the AUC
auc_value <- auc(roc_result)

# Plotting the ROC curve
ggplot(data = data.frame(fpr = 1 - roc_result$specificities, tpr = roc_result$sensitivities), aes(x = fpr, y = tpr)) +
  geom_line() +
  geom_abline(linetype = "dashed") +
  labs(x = "False Positive Rate", y = "True Positive Rate", title = "ROC Curve") +
  annotate("text", x = 0.6, y = 0.4, label = paste("AUC =", round(auc_value, 2)))




```


## Animations

```{r}

# Accuracy over time
accuracy_over_time <-
  test_set_with_predictions %>% 
  group_by(frames_from_tackle) %>%
  yardstick::accuracy(truth = tackle, estimate = binary_prediction) %>% 
  ggplot(aes(x = frames_from_tackle, y = .estimate)) +
  geom_line() +
  ylim(NA, 1)

ggplot(data = data.frame(fpr = 1 - roc_result$specificities, tpr = roc_result$sensitivities), aes(x = fpr, y = tpr)) +
  geom_line() +
  geom_abline(linetype = "dashed") +
  labs(x = "False Positive Rate", y = "True Positive Rate", title = "ROC Curve") +
  annotate("text", x = 0.6, y = 0.4, label = paste("AUC =", round(auc_value, 2)))


library(gganimate)
library(dplyr)

# Assuming week_1 is your data frame
animated_plot <-
  week_1 %>% 
  left_join(test_set_with_predictions %>% select(game_id, play_id, nfl_id, frame_id, prediction), by = c("game_id", "play_id", "nfl_id", "frame_id")) %>% 
  filter(!is.na(prediction)) %>% 
  group_by(game_id, play_id) %>% 
  filter(cur_group_id() == 1) %>% select(display_name, tackle, jersey_number) 
  ungroup()  |> 
  select(frame_id, prediction, jersey_number) |> 
  ggplot(aes(x = frame_id, y = prediction)) + 
  geom_line() +
  geom_point(show.legend = FALSE, size = 3) + 
  facet_wrap(~jersey_number) + 
  transition_reveal(frame_id)

anm1 <- animate(animated_plot, width = 800, height = 600, nframes = 100)

animated_plot2 <-
week_1 |> 
  filter(play_id %in% test_set_with_predictions$play_id) |> 
  filter(game_id %in% test_set_with_predictions$game_id) |> 
  left_join(
    test_set_with_predictions |> select(game_id, play_id, nfl_id, frame_id, prediction) |> 
      mutate(prediction = ifelse(is.na(prediction), 0, prediction))
    ) |> 
  group_by(game_id, play_id) |> 
  filter(cur_group_id() == 1) |>
  filter(frame_id >=5) |> 
  filter(frame_id <= max(frame_id)-4) |> 
  mutate(prediction = ifelse(club == defensive_team & is.na(prediction), 0, prediction)) |> 
  ungroup()  |> 
  mutate(color = prediction) |> 
  mutate(jersey_number = ifelse(defensive_team == club, jersey_number, "")) |> 
  select(display_name, distance_to_ball, x, y, color, absolute_yardline_number, ball_carrier, play_id, time, play_description, is_football, club, jersey_number, prediction, defensive_team, frame_id) %>%
  # filter(club == defensive_team) |> select(prediction, frame_id, display_name) |> print(n = Inf) |> pull(prediction) |> hist()
{
  ggplot(data = ., aes(x = x, y = y, color = color)) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "blue") +
  geom_point(aes(shape = is_football), size = 3, show.legend = FALSE) +
  geom_text(aes(label = jersey_number), color = "black", nudge_y = -1) +
  scale_color_gradient(low = "grey", high = "black", na.value = "dodgerblue") +
  transition_time(time) + ease_aes("linear") +
  labs(y = "", x = "Yards To Endzone", title = str_wrap(.$play_description[1], width = 80)) +
  theme_field
}

anm2 <- animate(animated_plot2, width = 800, height = 600, nframes = 100)

nn_briar <- 
  test_set_with_predictions |> 
  select(game_id, play_id, nfl_id, display_name,tackle, prediction) |> 
  filter(!is.na(prediction)) |> 
  mutate(tackle  = as.integer(as.character(tackle))) |> 
  group_by(game_id, play_id, nfl_id, display_name) |> 
  reframe(expected_prob_of_tackle = mean(prediction), tackle = mean(tackle)) |> 
  mutate(tackles_over_expected_play = ifelse(tackle == 1, 1-expected_prob_of_tackle, -expected_prob_of_tackle)) |> 
  group_by(nfl_id, display_name) |> 
  reframe(tackles_over_expected = sum(tackles_over_expected_play)) |> 
  arrange(-tackles_over_expected)


```

