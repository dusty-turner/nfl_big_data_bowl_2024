---
title: "Quantifying Tackling in Football"
subtitle: "A Data-Driven Approach Using the NFL Big Data Bowl Dataset and Advanced Machine Learning Techniques"
author: "Dusty Turner"
format: 
  revealjs:
    css: ["custom.css"]
    self-contained: true
cache: true
width: 1300
---

# A Quick Reminder

```{r}
library(tidyverse)
library(tidymodels)
options(scipen = 999)
```


```{r}
source(here::here("03-eda","1-data-clearning.R"))
dak <- week_1 |> filter(display_name == "Dak Prescott") |> distinct(game_id, play_id)
```

## Research Hypothesis 

![](01_images/competition_info.PNG)

<br>
<center>
**Research Question: Can we determine each defensive player's probability that they make a tackle on each running play on the football field?**
</center>

. . .

<br>
<center>
**Ultimately: Assign a 'tackles over expected' value for each player.**
</center>

## Literature Review

:::: {.columns}

::: {.column width="50%"}

<div style="text-align: center; width: 100%;">
  <img src="01_images/football_r.jpg" style="width: 70%;">
</div>

<!-- ![](01_images/football_r.jpg) -->
:::

::: {.column width="50%"}

### Previous NFL Big Data Bowl Competitions

::: {.r-fit-text}
- [2020](https://www.kaggle.com/competitions/nfl-big-data-bowl-2020): How many yards will an NFL player gain after receiving a handoff?  
- [2021](https://www.kaggle.com/competitions/nfl-big-data-bowl-2021): Evaluate defensive performance on passing plays  
- [2022](https://www.kaggle.com/competitions/nfl-big-data-bowl-2022): Evaluate special teams performance  
- [2023](https://www.kaggle.com/competitions/nfl-big-data-bowl-2023): Evaluate linemen on pass plays  
:::

:::

::::

## Data

<div style="font-size: 24px;">

:::: {.columns}

::: {.column width="50%"}

#### Player & Game Identifiers
- **Game and Play IDs**: Unique identifiers for games and individual plays
- **Player Information**: Names, jersey numbers, team, position, physical attributes, college

#### In-Game Player Movements
- **Spatial Data**: Player positions, movement direction, speed, and orientation
- **Time and Motion**: Specific moments in play, distance covered

#### Detailed Play Information
- **Play Attributes**: Description, quarter, down, yards needed
- **Team & Field Position**: Possessing team, defensive team, yardline positions

:::

::: {.column width="50%"}


#### Scoring and Game Probabilities
- **Scores & Results**: Pre-snap scores, play outcomes
- **Probabilities**: Win probabilities for home and visitor teams
- **Expected Points**: Points added or expected by play outcomes

#### Tackles, Penalties, and Formations
- **Tackles & Fouls**: Tackles, assists, fouls committed, and missed tackles
- **Ball Carrier Info**: Identifiers and names of ball carriers
- **Team Formations**: Offensive formations and number of defenders

:::

::::


</div>

##

<center>

```{r}

# week_1 |> 
#   filter(game_id == dak$game_id[2], play_id %in% unique(dak$play_id)[2]) |> 
#   filter(frame_id ==1) |> 
#   mutate(color = case_when(ball_carrier == TRUE ~ "ballcarrier",
#                            tackle == "1" ~ "tackler",
#                            is_football == "football" ~ "football",
#                            club == defensive_team ~ "defense",
#                            club != defensive_team ~ "offense")) |> 
#   select(distance_to_ball, x, y, color, absolute_yardline_number, ball_carrier, play_id, time, play_description, is_football, club) %>% 
# {
#   ggplot(data = ., aes(x = x, y = y, color = color)) +
#   geom_vline(aes(xintercept = absolute_yardline_number), color = "blue") +
#   geom_point(aes(shape = is_football), size = 3, show.legend = FALSE) +
#   # transition_time(time) + ease_aes("linear") +
#   labs(y = "", x = "Yards To Endzone", title = str_wrap(.$play_description[1], width = 80)) +
#   theme_field
# } |> 
#   ggsave(path = here::here("99-addm","01_images"), filename = "intro_position.png")
week_1 |>
  filter(game_id == dak$game_id[2], play_id %in% unique(dak$play_id)[2]) |>
  mutate(color = case_when(ball_carrier == TRUE ~ "ballcarrier",
                           tackle == "1" ~ "tackler",
                           is_football == "football" ~ "football",
                           club == defensive_team ~ "defense",
                           club != defensive_team ~ "offense")) |>
  select(distance_to_ball, x, y, color, absolute_yardline_number, ball_carrier, play_id, time, play_description, is_football, club) %>%
{
  ggplot(data = ., aes(x = x, y = y, color = color)) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "blue") +
  geom_point(aes(shape = is_football), size = 3, show.legend = FALSE) +
  transition_time(time) + ease_aes("linear") +
  labs(y = "", x = "Yards To Endzone", title = str_wrap(.$play_description[1], width = 80)) +
  theme_field
}
```

</center>

```{r, eval=FALSE}
plot_a <-
week_1 |> 
  filter(game_id == dak$game_id[2], play_id %in% unique(dak$play_id)[2]) |> 
  # filter(frame_id ==1) |> 
  filter(defensive_team == club | is_football == "football") |> 
  mutate(color = ifelse(is_football != "football", distance_to_ball, NA)) |> 
  group_by(frame_id) |> 
    mutate(x_ball = ifelse(display_name == "football", x, NA)) |> 
  mutate(y_ball = ifelse(display_name == "football", y, NA)) |> 
  mutate(x_ball = mean(x_ball, na.rm = TRUE)) |> 
  mutate(y_ball = mean(y_ball, na.rm = TRUE)) |> 
  ungroup() |> 
  select(distance_to_ball, display_name, x, y, x_ball, y_ball, color, absolute_yardline_number, ball_carrier, play_id, time, play_description, is_football, club, distance_to_ball) %>% 
{
  ggplot(data = ., aes(x = x, y = y, color = color)) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "blue") +
  geom_segment(aes(xend = x_ball, yend = y_ball), color = "black") +
  geom_point(aes(shape = is_football), show.legend = FALSE, size = 5) +
  scale_color_continuous(high = "grey", low = "black") +
  # facet_wrap(~play_id) +
  transition_time(time) + ease_aes("linear") +
  labs(y = "", x = "Yards To Endzone", title = str_wrap(.$play_description[1], width = 80)) +
  theme_field
}  
  # ggsave(path = here::here("99-addm","01_images"), filename = "intro_distance.png")

plot_b <-
week_1 |> 
  filter(game_id == dak$game_id[2], play_id %in% unique(dak$play_id)[2]) |> 
  # filter(frame_id== 35) |> 
  filter(defensive_team == club | is_football == "football") |> 
  mutate(color = ifelse(is_football != "football", distance_to_ball, NA)) |> 
  select(display_name, x, y, x_ball, y_ball, v_approach, color, absolute_yardline_number, ball_carrier, play_id, time, is_football, club, distance_to_ball, play_description) %>% 
{
  ggplot(data = ., aes(x = x, y = y, color = v_approach)) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "blue") +
  geom_point(aes(shape = is_football), show.legend = FALSE, size = 5) +
  scale_color_gradient2(na.value = "dodgerblue", low = "green", high = "green", mid = "red", midpoint = 0) +
  # transition_time(time) + ease_aes("linear") +
  labs(y = "", x = "Yards To Endzone", title = str_wrap(.$play_description[1], width = 80)) +
  theme_field
}  
  # ggsave(path = here::here("99-addm","01_images"), filename = "intro_speed_vector.png")

plot_c <-
week_1 |> 
  filter(game_id == dak$game_id[2], play_id %in% unique(dak$play_id)[2]) |> 
  # filter(frame_id == 25) |> 
  filter(defensive_team == club | is_football == "football") |> 
  mutate(color = ifelse(is_football != "football", distance_to_ball, NA)) |> 
  select(display_name, x, y, x_ball, y_ball, v_approach, color, absolute_yardline_number, ball_carrier, play_id, time, is_football, club, distance_to_ball, play_description, x_going, y_going,o, jersey_number) %>% 
{
  ggplot(data = ., aes(x = x, y = y)) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "blue") +
  geom_point(aes(shape = is_football), show.legend = FALSE, size = 5) +
  geom_segment(aes(xend = x_going, yend = y_going), arrow = arrow(length = unit(0.03, "npc")), color = "black") +
  scale_color_gradient2(na.value = "dodgerblue", low = "black", high = "yellow") +
  transition_time(time) + ease_aes("linear") +
  labs(y = "", x = "Yards To Endzone", title = str_wrap(.$play_description[1], width = 80)) +
  theme_field
}  
  # ggsave(path = here::here("99-addm","01_images"), filename = "intro_player_projection.png")

plot_d <-
week_1 |> 
  filter(game_id == dak$game_id[2], play_id %in% unique(dak$play_id)[2]) |> 
  # filter(frame_id == 35) |> 
  filter(defensive_team == club | is_football == "football") |> 
  mutate(color = ifelse(ball_in_fan == "yes" | is_football == "football", "No", "Yes")) |> 
  mutate(color = ifelse(is_football == "football", "three", color)) |>
  mutate(color = fct_relevel(color, "No", "three", "Yes")) |> 
  # count(color)
  select(frame_id, display_name, x, y, x_facing, y_facing, x_left, x_right, y_left, y_right, v_approach, color, absolute_yardline_number, ball_carrier, play_id, time, is_football, club, distance_to_ball, play_description, x_going, y_going,o, jersey_number) %>%
{
  ggplot(data = ., aes(x = x, y = y, color = color, shape = is_football)) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "blue") +
  geom_point(show.legend = FALSE, size = 5) +
  geom_segment(aes(xend = x_left, yend = y_left), arrow = arrow(length = unit(0.02, "npc")), color = "purple") +
  geom_segment(aes(xend = x_right, yend = y_right), arrow = arrow(length = unit(0.02, "npc")), color = "purple") +
  transition_states(states = frame_id, transition_length = .1, state_length = .01, wrap = TRUE) +
  labs(y = "", x = "Yards To Line of Scrimage", title = str_wrap(.$play_description[1], width = 80)) +
  theme_field +  guides(shape = "none")
} 
  # ggsave(path = here::here("99-addm","01_images"), filename = "intro_range_fan.png")

plot_e <-
week_1 |> 
  filter(game_id == dak$game_id[2], play_id %in% unique(dak$play_id)[2]) |> 
  filter(defensive_team == club | is_football == "football") |> 
  mutate(color = ifelse(ball_in_fan == "yes" | is_football == "football", "No", "Yes")) |> 
  select(frame_id, display_name, x, y, x_facing, y_facing, x_left, x_right, y_left, y_right, v_approach, color, absolute_yardline_number, ball_carrier, play_id, time, is_football, club, distance_to_ball, play_description, x_going, y_going,o, jersey_number) %>% 
  {
    ggplot(data = ., aes(x = x, y = y)) +
      geom_vline(aes(xintercept = absolute_yardline_number), color = "blue") +
      geom_point(aes(shape = is_football, color = color), show.legend = FALSE, size = 5) +
      geom_segment(aes(xend = x_left, yend = y_left), arrow = arrow(length = unit(0.02, "npc")), color = "purple") +
      geom_segment(aes(xend = x_right, yend = y_right), arrow = arrow(length = unit(0.02, "npc")), color = "purple") +
  geom_segment(aes(xend = x_going, yend = y_going), arrow = arrow(length = unit(0.03, "npc")), color = "black") +
      transition_states(states = frame_id, transition_length = .1, state_length = .01, wrap = TRUE) +
      # transition_time(time) + ease_aes("linear") +
      labs(y = "", x = "Yards To Endzone", title = str_wrap(.$play_description[1], width = 80)) +
      theme_field
  }

plot_f <-
week_1 |> 
  filter(game_id == dak$game_id[2], play_id %in% unique(dak$play_id)[2]) |> 
  # filter(frame_id == 25) |> 
  filter(defensive_team == club | is_football == "football") |> 
  mutate(color = ifelse(is_football != "football", distance_to_ball, NA)) |> 
  select(display_name, x, y, x_ball, y_ball, v_approach, color, absolute_yardline_number, ball_carrier, play_id, time, is_football, club, distance_to_ball, play_description, x_going, y_going, x_ball_next, y_ball_next) %>% 
  # filter(is_football == "football") |> select(x, y, x_going, y_going)
{
  ggplot(data = ., aes(x = x, y = y, color = is_football)) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "blue") +
  geom_point(aes(shape = is_football), show.legend = FALSE, size = 5) +
  geom_segment(aes(xend = x_ball_next, yend = y_ball_next), color = "black") +
  # scale_color_gradient2(na.value = "dodgerblue", low = "black", high = "yellow") +
  # facet_wrap(~play_id) +
  transition_time(time) + ease_aes("linear") +
  labs(y = "", x = "Yards To Endzone", title = str_wrap(.$play_description[1], width = 80)) +
  theme_field
}  
  # ggsave(path = here::here("99-addm","01_images"), filename = "intro_projected_distance.png")

anim_a <- animate(plot_a)
anim_b <- animate(plot_b)
anim_c <- animate(plot_c)
anim_d <- animate(plot_d)
anim_e <- animate(plot_e)
anim_f <- animate(plot_f)

anim_save(animation = anim_a, filename = "plot_a.gif", path = "99-addm/01_images/")
anim_save(animation = anim_b, filename = "plot_b.gif", path = "99-addm/01_images/")
anim_save(animation = anim_c, filename = "plot_c.gif", path = "99-addm/01_images/")
anim_save(animation = anim_d, filename = "plot_d.gif", path = "99-addm/01_images/")
anim_save(animation = anim_e, filename = "plot_e.gif", path = "99-addm/01_images/")
anim_save(animation = anim_f, filename = "plot_f.gif", path = "99-addm/01_images/")


```

## Feature Development


<div class="slide">
<div class="image-container">
<img src="01_images/plot_a.gif">
</div>
<div class="image-container">
<img src="01_images/plot_f.gif">
</div>
<div class="image-container">
<img src="01_images/plot_b.gif">
</div>
</div>

## Feature Development

<div class="slide">
<div class="image-container">
<img src="01_images/plot_c.gif">
</div>
<div class="image-container">
<img src="01_images/plot_d.gif">
</div>
<div class="image-container">
<img src="01_images/plot_e.gif">
</div>
</div>



## Feature Development

:::: {.columns}

::: {.column width="50%"}

```{r}


defensive_model_building_data |>
  filter(game_id == dak$game_id[1], play_id %in% unique(dak$play_id)[c(2,3,7,8)]) |>
  filter(frame_id == 1) |>
  filter(defensive_team == club | is_football == "football") |>
  mutate(color = ifelse(is_football != "football", distance_to_ball, NA)) |>
  select(game_id, display_name, x, y, v_approach, color, absolute_yardline_number, ball_carrier, play_id, time, is_football, club, distance_to_ball, play_description, x_going, y_going, position) %>%

  {
  ggplot(data = ., aes(x = x, y = y, color = position)) +
  geom_vline(aes(xintercept = absolute_yardline_number), color = "blue") +
  geom_point(aes(shape = is_football), show.legend = TRUE, size = 4) +
  # transition_time(time) + ease_aes("linear") +
  facet_wrap(~play_id, labeller = labeller(play_id = c("89" = "Play 1","110" = "Play 2","200" = "Play 3","246" = "Play 4"))
             ) +
  labs(y = "", x = "Yards To Endzone", title = "") +
  theme_field +
      guides(shape = "none") +
  theme(legend.position = "bottom")

}
```

:::

::: {.column width="50%"}


```{r}
defensive_model_building_data |> 
  # filter(game_id == dak$game_id[1], play_id %in% unique(dak$play_id)[c(2,3,6,7)]) |> 
  filter(frame_id == 6) |> 
  filter(defensive_team == club | is_football == "football") |> 
  filter(is.na(pass_result))  |> 
  # mutate(color = as.factor(alignment_cluster)) |>
  select(game_id, display_name, x, x_from_los, y, v_approach, absolute_yardline_number, ball_carrier, play_id, time, is_football, club, distance_to_ball, play_description, x_going, y_going, alignment, alignment_cluster) %>%
  
  {
  ggplot(data = ., aes(x = x_from_los, y = y, color = alignment_cluster)) +
  # geom_vline(aes(xintercept = absolute_yardline_number), color = "blue") +
  geom_point(aes(shape = is_football), show.legend = TRUE, size = 1) +
  # transition_time(time) + ease_aes("linear") +
  # facet_wrap(~play_id, labeller = labeller(play_id = c("89" = "Play 1","110" = "Play 2","179" = "Play 3","200" = "Play 4"))) +
  labs(y = "", x = "Yards To Line of Scrimage", title = "", color = "Alignment Cluster") +
  theme_field +
      guides(shape = "none") +
  theme(legend.position = "bottom") 
  
} # |>  ggsave(path = here::here("99-addm","01_images"), filename = "intro_clusters.png")

```

:::

::::

## Modeling Overview {.scrollable}

```{r}
pen_rds <- read_rds(here::here("99-addm", "penalty.RDS"))
rf_rds <- read_rds(here::here("99-addm", "rf.RDS"))
xg_rds <- read_rds(here::here("99-addm", "xg.RDS"))
nn_rds <- read_rds(here::here("99-addm", "nn.RDS"))
```

<div style="font-size: 24px;">

:::: {.columns}

::: {.column width="50%"}

**Rows**: 393,536  
**Technique**: Group Splitting  (Game ID / Play ID)

**Factors to Consider**:  
- Tackle (0/1)   
- Future X/Y  
- S/A/O/Dir of defender  
- Position / Alignment cluster Interaction  
- Number of Defenders in the Box  
- Current and future (.5 seconds) location of the ball  
- O/S/A/Dir of ball carrier  
- Velocity/direction difference  
- Ball in defensive players 'fan'  


:::

::: {.column width="50%"}

**Concerns**:  

* Computational time  
    + Limits tuning parameter options    
    + Impacts choices for train/test/validation splits  
* Different coding languages  

:::

::::

</div>


## Modeling Overview {.scrollable}

<div style="font-size: 24px;">


:::: {.columns}

::: {.column width="50%"}


* **Penalized Regression**: {GLMNET}
* **Random Forest**: {Ranger}
* **XGBoost**: {XGBoost}
    + Train: `r format(pen_rds$nrow_train, big.mark = ",")`: 5%
    + Validate: `r format(pen_rds$nrow_val, big.mark = ",")`: 1%
    + Test: `r format(pen_rds$nrow_test, big.mark = ",")`: 96%
    + Baseline Accuracy: `r rf_rds$baseline_accuracy`

<!-- * Penalized Regression: {GLMNET} -->
<!--     + Train: `r format(pen_rds$nrow_train, big.mark = ",")` -->
<!--     + Validate: `r format(pen_rds$nrow_val, big.mark = ",")` -->
<!--     + Test: `r format(pen_rds$nrow_test, big.mark = ",")` -->
<!--     + Baseline Accuracy: `r rf_rds$baseline_accuracy` -->
<!-- * Random Forest: {Ranger} -->
<!--     + Train: `r format(rf_rds$nrow_train, big.mark = ",")` -->
<!--     + Validate: `r format(rf_rds$nrow_val, big.mark = ",")` -->
<!--     + Test: `r format(rf_rds$nrow_test, big.mark = ",")` -->
<!--     + Baseline Accuracy: `r rf_rds$baseline_accuracy` -->

:::

::: {.column width="50%"}

<!-- * XGBoost: {XGBoost} -->
<!--     + Train: `r format(xg_rds$nrow_train, big.mark = ",")` -->
<!--     + Validate: `r format(xg_rds$nrow_val, big.mark = ",")` -->
<!--     + Test: `r format(xg_rds$nrow_test, big.mark = ",")` -->
<!--     + Baseline Accuracy: `r rf_rds$baseline_accuracy` -->
* **Neural Network**: {Reticulate} (Python Tensor Flow)
    + Train: `r format(nn_rds$train, big.mark = ",")`: 57%
    + Validate: `r format(nn_rds$val, big.mark = ",")`: 15%
    + Test: `r format(nn_rds$test, big.mark = ",")`: 28%
    + Baseline Accuracy: 92.94%

:::

::::

</div>

## Penalized Regression {.smaller}

$$\text{Minimize } \left\{ \frac{1}{N} \sum_{i=1}^{N} (y_i - \mathbf{x}_i^T \boldsymbol{\beta})^2 + \lambda \left[ \frac{1 - \alpha}{2} \|\boldsymbol{\beta}\|_2^2 + \alpha \|\boldsymbol{\beta}\|_1 \right] \right\}$$


:::: {.columns}

::: {.column width="70%"}

<center>

```{r}
# pen_rds <- read_rds(here::here("99-addm", "penalty.RDS"))
pen_rds$pen_grid
```

</center>

:::

::: {.column width="30%"}

<br>
<br>

* Tuning Parameters
    + Alpha
    + Lambda

:::

::::
## Penalized Regression {.smaller}

```{r, cache = FALSE}
options(scipen = 999)
```

:::: {.columns}

::: {.column width="70%"}

```{r}
pen_rds$pen_grid_results +
  geom_point(aes(x = (pen_rds$best_parameters$penalty), y = pen_rds$best_parameters$mixture), shape = 4, color = "black", size = 5) 
```

:::

::: {.column width="30%"}

<br>

The best parameters are: 

Lambda = `r round(as.numeric(pen_rds$best_parameters$penalty), 5)`  
Alpha = `r as.character(round(as.numeric(pen_rds$best_parameters$mixture), 7))`  

Accuracy of `r stringr::str_c(round(pen_rds$best_parameters$mean,4)*100, "%")`

:::

::::

<center>


</center>

## Penalized Regression {.smaller}

```{r}
pen_rds$interpret |> 
  filter(!str_detect(term, "Intercept")) |> 
  filter(abs(estimate) > .01) |> 
  mutate(term = fct_reorder(term, estimate)) |> 
  ggplot(aes(x = term, y = estimate, fill = estimate)) +
  geom_col(show.legend = FALSE) +
  coord_flip() +
  labs(x = "") +
  theme_minimal()

# pen_rds$interpret |> as_tibble() |> select(-penalty) |> 
#   mutate(mag = abs(estimate)) |> 
#   arrange(-mag) |> 
#   slice(1:10) |> 
#   select(-mag) |> 
#   gt::gt() |> gt::fmt_number()
```

## Random Forest {.smaller}

:::: {.columns}

::: {.column width="70%"}

```{r}
rf_rds$rf_grid
```

:::

::: {.column width="30%"}

<br>
<br>

* Tuning Parameters
    + Mtry
    + Min_n
    + Trees

:::

::::


## Random Forest {.smaller}

```{r}
options(scipen = 999)
```

:::: {.columns}

::: {.column width="70%"}

```{r}
rf_rds$rf_grid_results +
    geom_point(aes(x = rf_rds$best_parameters$min_n, y = rf_rds$best_parameters$mtry), shape = 4, color = "black", show.legend = FALSE)
```

:::

::: {.column width="30%"}

<br>

The best parameters are: 

Mtry = `r round(as.numeric(rf_rds$best_parameters$mtry), 1)`  
Min_n = `r round(as.numeric(rf_rds$best_parameters$min_n), 1)`  
Trees = `r round(as.numeric(rf_rds$best_parameters$trees), 1)`  

Accuracy of `r stringr::str_c(round(as.numeric(rf_rds$rf_accuracy$.estimate[1]),4)*100, "%")`.

:::

::::

## Random Forest {.smaller}

```{r}
rf_rds$interpret +
  labs(title = "Top 10 Factors") +
  theme_minimal()
```


## XGBoost {.smaller}

<center>

:::: {.columns}

::: {.column width="70%"}

```{r}
xg_rds$xg_grid
```

:::

::: {.column width="30%"}

<br>
<br>

* Tuning Parameters
    + Trees
    + Min_n
    + Tree Depth
    + Learning Rate
    + Loss Reduction
    + Sample Size %

:::

::::

</center>

## XGBoost {.smaller}

```{r}
options(scipen = 999)
```


:::: {.columns}

::: {.column width="70%"}
<center>

```{r}
xg_rds$xg_grid_results + 
  geom_point(aes(x = xg_rds$best_parameters$tree_depth, y = xg_rds$best_parameters$min_n), shape = 4, color = "black", show.legend = FALSE)
```

</center>
:::

::: {.column width="30%"}

<br>

The best parameters are:   

Trees = `r round(as.numeric(xg_rds$best_parameters$trees), 1)`   
Min_n = `r round(as.numeric(xg_rds$best_parameters$min_n), 1)`   
Tree Depth = `r round(as.numeric(xg_rds$best_parameters$tree_depth), 1)`   
Learn Rate = `r round(as.numeric(xg_rds$best_parameters$learn_rate), 1)`   
Loss Reduction = `r round(as.numeric(xg_rds$best_parameters$loss_reduction), 0)`   
Sample Size = `r round(as.numeric(xg_rds$best_parameters$sample_size), 0)`   

Accuracy of `r stringr::str_c(round(as.numeric(rf_rds$rf_accuracy$.estimate[1]),4)*100, "%")`.

:::

::::


## XGBoost {.smaller}

```{r}
xg_rds$interpret + theme_minimal()
```


## Neural Network {.smaller}

```{r}
nn_rds <- read_rds(here::here("99-addm", "nn.RDS"))
```

```{.python code-line-numbers="|3,6,9|4,7,10|5,8,11|14|"}
def build_model(input_shape):
    model = Sequential([
        Dense(64, activation='relu', input_shape=[input_shape], kernel_regularizer=l2(0.001)),
        BatchNormalization(),  # normalizes layer inputs to stabilize and accelerate neural training
        Dropout(0.3),          # randomly deactivates neurons to prevent overfitting
        Dense(64, activation='relu', kernel_regularizer=l2(0.001)),
        BatchNormalization(),  
        Dropout(0.3),
        Dense(64, activation='relu', kernel_regularizer=l2(0.001)),
        BatchNormalization(),  
        Dropout(0.3),
        Dense(1, activation='sigmoid', kernel_regularizer=l2(0.001))  # Apply L2 regularization here
    ])
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model
```

<br>

::: {.fragment}

<center>
Accuracy: `r stringr::str_c(round(nn_rds$accuracy,4)*100,"%")`
</center>

:::

## Neural Network {.smaller}

<center>

```{r}
nn_rds$nn_anim2
```


</center>

## Neural Network {.smaller}

:::: {.columns}

::: {.column width="50%"}


```{r}
nn_rds$nn_anim1
```

:::

::: {.column width="50%"}

```{r}
nn_rds$nn_anim2
```

:::

::::

## Neural Network {.smaller}

<center>

```{r}
nn_rds$accuracy_over_time +
  labs(x = "Frames Away From Tackle", y = "Probability") +
  theme_minimal()
```

</center>

## Points Above or Below Expected

<br>
<br>
<br>

<div style="font-size: 24px;">

$\sum_{i=1}^{N} (\mathbb{I}_{\text{tackle}_i} - P(\text{tackle}_i))$

Where:

1. $N$ is the total number of plays  
2. $P(\text{tackle}_i)$ is the probability of a tackle on play $i$  
3. $\mathbb{I}_{\text{tackle}_i}$ is the indicator function which is 1 if a tackle occurred on play $i$ and 0 otherwise  

</div>

## Points Above or Below Expected

```{r}
joiner <- defensive_model_building_data_model |> select(nfl_id, position) |> distinct()

library(gt)

make_gt <-  function(data, title, acc = nn_rds$accuracy){
  
  acc_stem <- str_c(round(acc,4)*100,"%")
  
  if(acc < .929) {
    sub <- html(paste0("<span style='color: firebrick;'>", "Accuracy: ", acc_stem, "</span>"))
  } else {
    sub <- html(paste0("<span style='color: green;'>", "Accuracy: ", acc_stem, "</span>"))
  }
  
  data |>
    left_join(joiner) |> 
  arrange(-tackles_over_expected) |> 
    rename(`Display Name` = display_name,  `TOE` = tackles_over_expected, `Position` = position) |> 
  slice(c(1:4,(n() - 3):n())) |> 
  select(-nfl_id) |> 
  gt::gt() |> gt::fmt_number() |>  
    gt::tab_header(title = title,
                   # subtitle = str_c("Accuracy: ", acc)
                   subtitle = sub
                   ) |> 
    tab_style(
    style = list(
      cell_borders(sides = "top", color = "black", weight = px(2))
    ),
    locations = cells_body(
      rows = 5, 
      columns = everything()
    )
  )
}
```

:::: {.columns}

::: {.column width="25%"}

```{r}
pen_rds$pen_briar |> make_gt(title = "Penalized Regression", acc = pen_rds$pen_accuracy$.estimate[1])
```

:::

::: {.column width="25%"}

```{r}
rf_rds$rf_briar |> make_gt(title = "Random Forest", acc = rf_rds$rf_accuracy$.estimate[1])
```
:::

::: {.column width="25%"}

```{r}
xg_rds$xg_briar |>  make_gt(title = "Extreme Gradient Boosting", acc = xg_rds$xg_accuracy$.estimate[1])
```

:::

::: {.column width="25%"}

```{r}
nn_rds$nn_briar |>  make_gt(title = "Neural Net", acc = nn_rds$accuracy)
```

:::

::::

##

<center>

![](01_images/final_slide_image.png)

</center>
